// Classes and structures being serialized

// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
// To make custom modifications, edit the .proto file and add //:external before the message line
// then write the code and the changes in a separate file.
using System;
using System.Collections.Generic;

namespace VBspViewer.Importing.Dem.Generated
{
    /// <summary>
    /// <para>====== Copyright (c) 2013, Valve Corporation, All rights reserved. ========//</para>
    /// <para></para>
    /// <para> Redistribution and use in source and binary forms, with or without</para>
    /// <para> modification, are permitted provided that the following conditions are met:</para>
    /// <para></para>
    /// <para> Redistributions of source code must retain the above copyright notice, this</para>
    /// <para> list of conditions and the following disclaimer.</para>
    /// <para> Redistributions in binary form must reproduce the above copyright notice,</para>
    /// <para> this list of conditions and the following disclaimer in the documentation</para>
    /// <para> and/or other materials provided with the distribution.</para>
    /// <para></para>
    /// <para> THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"</para>
    /// <para> AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</para>
    /// <para> IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</para>
    /// <para> ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE</para>
    /// <para> LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR</para>
    /// <para> CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF</para>
    /// <para> SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS</para>
    /// <para> INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN</para>
    /// <para> CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)</para>
    /// <para> ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF</para>
    /// <para> THE POSSIBILITY OF SUCH DAMAGE.</para>
    /// <para>===========================================================================//</para>
    /// <para></para>
    /// <para> Purpose: The file defines our Google Protocol Buffers which are used in over</para>
    /// <para> the wire messages for the Source engine.</para>
    /// <para></para>
    /// <para>=============================================================================</para>
    /// <para> Note about encoding:</para>
    /// <para>	http://code.google.com/apis/protocolbuffers/docs/encoding.html</para>
    /// <para></para>
    /// <para> TL;DR: Use sint32/sint64 for values that may be negative.</para>
    /// <para></para>
    /// <para> There is an important difference between the signed int types (sint32 and sint64)</para>
    /// <para> and the "standard" int types (int32 and int64) when it comes to encoding negative</para>
    /// <para> numbers.  If you use int32 or int64 as the type for a negative number, the</para>
    /// <para> resulting varint is always ten bytes long � it is, effectively, treated like a</para>
    /// <para> very large unsigned integer.  If you use one of the signed types, the resulting</para>
    /// <para> varint uses ZigZag encoding, which is much more efficient.</para>
    /// <para> Commenting this out allows it to be compiled for SPEED or LITE_RUNTIME.</para>
    /// <para> option optimize_for = SPEED;</para>
    /// <para> We don't use the service generation functionality</para>
    /// <para></para>
    /// <para> STYLE NOTES:</para>
    /// <para></para>
    /// <para> Use CamelCase CMsgMyMessageName style names for messages.</para>
    /// <para></para>
    /// <para> Use lowercase _ delimited names like my_steam_id for field names, this is non-standard for Steam,</para>
    /// <para> but plays nice with the Google formatted code generation.</para>
    /// <para></para>
    /// <para> Try not to use required fields ever. Only do so if you are really really sure you'll never want them removed.</para>
    /// <para> Optional should be preffered as it will make versioning easier and cleaner in the future if someone refactors</para>
    /// <para> your message and wants to remove or rename fields.</para>
    /// <para></para>
    /// <para> Use fixed64 for JobId_t, GID_t, or SteamID.  This is appropriate for any field that is normally</para>
    /// <para> going to be larger than 2^56.  Otherwise use int64 for 64 bit values that are frequently smaller</para>
    /// <para> than 2^56 as it will safe space on the wire in those cases.</para>
    /// <para></para>
    /// <para> Similar to fixed64, use fixed32 for RTime32 or other 32 bit values that are frequently larger than</para>
    /// <para> 2^28.  It will safe space in those cases, otherwise use int32 which will safe space for smaller values.</para>
    /// <para> An exception to this rule for RTime32 is if the value will frequently be zero rather than set to an actual</para>
    /// <para> time.</para>
    /// <para></para>
    /// <para> import "google/protobuf/descriptor.proto";</para>
    /// <para>=============================================================================</para>
    /// <para> Common Types</para>
    /// <para>=============================================================================</para>
    /// </summary>
    public partial class CMsgVector
    {
        public float X { get; set; }

        public float Y { get; set; }

        public float Z { get; set; }

    }

    public partial class CMsgVector2D
    {
        public float X { get; set; }

        public float Y { get; set; }

    }

    public partial class CMsgQAngle
    {
        public float X { get; set; }

        public float Y { get; set; }

        public float Z { get; set; }

    }

    public partial class CMsgRGBA
    {
        public int R { get; set; }

        public int G { get; set; }

        public int B { get; set; }

        public int A { get; set; }

    }

    /// <summary> signals or acks current signon state</summary>
    public partial class CNETMsgTick
    {
        public uint Tick { get; set; }

        /// <summary> current tick count</summary>
        public uint HostComputationtime { get; set; }

        /// <summary> Host frame computation time in usec (1/1,000,000th sec) - will be say 4 ms when server is running at 25% CPU load for 64-tick server</summary>
        public uint HostComputationtimeStdDeviation { get; set; }

        /// <summary> Host frame computation time stddev in usec (1/1,000,000th sec)</summary>
        public uint HostFramestarttimeStdDeviation { get; set; }

    }

    public partial class CNETMsgStringCmd
    {
        public string Command { get; set; }

    }

    public partial class CNETMsgSignonState
    {
        public uint SignonState { get; set; }

        /// <summary> See SIGNONSTATE_ defines</summary>
        public uint SpawnCount { get; set; }

        /// <summary> server spawn count (session number)</summary>
        public uint NumServerPlayers { get; set; }

        /// <summary> Number of players the server discloses as connected to the server</summary>
        public List<string> PlayersNetworkids { get; set; }

        /// <summary> player network ids</summary>
        public string MapName { get; set; }

    }

    public partial class CMsgCVars
    {
        public List<VBspViewer.Importing.Dem.Generated.CMsgCVars.CVar> Cvars { get; set; }

        public partial class CVar
        {
            public string Name { get; set; }

            public string Value { get; set; }

        }

    }

    public partial class CNETMsgSetConVar
    {
        public VBspViewer.Importing.Dem.Generated.CMsgCVars Convars { get; set; }

    }

    public partial class CNETMsgNOP
    {
    }

    public partial class CNETMsgDisconnect
    {
        public string Text { get; set; }

    }

    public partial class CNETMsgFile
    {
        public int TransferId { get; set; }

        public string FileName { get; set; }

        public bool IsReplayDemoFile { get; set; }

        public bool Deny { get; set; }

    }

    /// <summary> Server wants to know the value of a cvar on the client</summary>
    public partial class CSVCMsgServerInfo
    {
        public int Protocol { get; set; }

        /// <summary> protocol version</summary>
        public int ServerCount { get; set; }

        /// <summary> number of changelevels since server start</summary>
        public bool IsDedicated { get; set; }

        /// <summary> dedicated server ?</summary>
        public bool IsOfficialValveServer { get; set; }

        public bool IsHltv { get; set; }

        /// <summary> HLTV server ?</summary>
        public bool IsReplay { get; set; }

        /// <summary> Replay server ?</summary>
        public bool IsRedirectingToProxyRelay { get; set; }

        /// <summary> // Will be redirecting to proxy relay</summary>
        public int COs { get; set; }

        /// <summary> L = linux, W = Win32</summary>
        public uint MapCrc { get; set; }

        /// <summary> server map CRC</summary>
        public uint ClientCrc { get; set; }

        /// <summary> client.dll CRC server is using</summary>
        public uint StringTableCrc { get; set; }

        /// <summary> string table CRC server is using</summary>
        public int MaxClients { get; set; }

        /// <summary> max number of clients on server</summary>
        public int MaxClasses { get; set; }

        /// <summary> max number of server classes</summary>
        public int PlayerSlot { get; set; }

        /// <summary> our client slot number</summary>
        public float TickInterval { get; set; }

        /// <summary> server tick interval</summary>
        public string GameDir { get; set; }

        /// <summary> game directory eg "tf2"</summary>
        public string MapName { get; set; }

        /// <summary> name of current map</summary>
        public string MapGroupName { get; set; }

        /// <summary> name of current map</summary>
        public string SkyName { get; set; }

        /// <summary> name of current skybox</summary>
        public string HostName { get; set; }

        /// <summary> server name</summary>
        public ulong UgcMapId { get; set; }

    }

    public partial class CSVCMsgClassInfo
    {
        public bool CreateOnClient { get; set; }

        public List<VBspViewer.Importing.Dem.Generated.CSVCMsgClassInfo.ClassT> Classes { get; set; }

        public partial class ClassT
        {
            public int ClassId { get; set; }

            public string DataTableName { get; set; }

            public string ClassName { get; set; }

        }

    }

    public partial class CSVCMsgSendTable
    {
        public bool IsEnd { get; set; }

        public string NetTableName { get; set; }

        public bool NeedsDecoder { get; set; }

        public List<VBspViewer.Importing.Dem.Generated.CSVCMsgSendTable.SendpropT> Props { get; set; }

        public partial class SendpropT
        {
            public int Type { get; set; }

            /// <summary> SendPropType</summary>
            public string VarName { get; set; }

            public int Flags { get; set; }

            public int Priority { get; set; }

            public string DtName { get; set; }

            /// <summary> if pProp->m_Type == DPT_DataTable || IsExcludeProp</summary>
            public int NumElements { get; set; }

            /// <summary> else if pProp->m_Type == DPT_Array</summary>
            public float LowValue { get; set; }

            /// <summary> else ...</summary>
            public float HighValue { get; set; }

            /// <summary> 		...</summary>
            public int NumBits { get; set; }

        }

    }

    public partial class CSVCMsgPrint
    {
        public string Text { get; set; }

    }

    public partial class CSVCMsgSetPause
    {
        public bool Paused { get; set; }

    }

    public partial class CSVCMsgSetView
    {
        public int EntityIndex { get; set; }

    }

    public partial class CSVCMsgCreateStringTable
    {
        public string Name { get; set; }

        public int MaxEntries { get; set; }

        public int NumEntries { get; set; }

        public bool UserDataFixedSize { get; set; }

        public int UserDataSize { get; set; }

        public int UserDataSizeBits { get; set; }

        public int Flags { get; set; }

        public byte[] StringData { get; set; }

    }

    public partial class CSVCMsgUpdateStringTable
    {
        public int TableId { get; set; }

        public int NumChangedEntries { get; set; }

        public byte[] StringData { get; set; }

    }

    public partial class CSVCMsgVoiceInit
    {
        public int Quality { get; set; }

        public string Codec { get; set; }

    }

    public partial class CSVCMsgVoiceData
    {
        public int Client { get; set; }

        public bool Proximity { get; set; }

        public ulong Xuid { get; set; }

        public int AudibleMask { get; set; }

        public byte[] VoiceData { get; set; }

    }

    public partial class CSVCMsgFixAngle
    {
        public bool Relative { get; set; }

        public VBspViewer.Importing.Dem.Generated.CMsgQAngle Angle { get; set; }

    }

    public partial class CSVCMsgCrosshairAngle
    {
        public VBspViewer.Importing.Dem.Generated.CMsgQAngle Angle { get; set; }

    }

    public partial class CSVCMsgPrefetch
    {
        public int SoundIndex { get; set; }

    }

    public partial class CSVCMsgBSPDecal
    {
        public VBspViewer.Importing.Dem.Generated.CMsgVector Pos { get; set; }

        public int DecalTextureIndex { get; set; }

        public int EntityIndex { get; set; }

        public int ModelIndex { get; set; }

        public bool LowPriority { get; set; }

    }

    public partial class CSVCMsgGetCvarValue
    {
        public int Cookie { get; set; }

        /// <summary> QueryCvarCookie_t</summary>
        public string CvarName { get; set; }

    }

    public partial class CSVCMsgMenu
    {
        public int DialogType { get; set; }

        /// <summary> DIALOG_TYPE</summary>
        public byte[] MenuKeyValues { get; set; }

    }

    public partial class CSVCMsgUserMessage
    {
        public int MsgType { get; set; }

        public byte[] MsgData { get; set; }

    }

    public partial class CSVCMsgGameEvent
    {
        public string EventName { get; set; }

        public int Eventid { get; set; }

        public List<VBspViewer.Importing.Dem.Generated.CSVCMsgGameEvent.KeyT> Keys { get; set; }

        public partial class KeyT
        {
            public int Type { get; set; }

            /// <summary> type</summary>
            public string ValString { get; set; }

            /// <summary> TYPE_STRING</summary>
            public float ValFloat { get; set; }

            /// <summary> TYPE_FLOAT</summary>
            public int ValLong { get; set; }

            /// <summary> TYPE_LONG</summary>
            public int ValShort { get; set; }

            /// <summary> TYPE_SHORT</summary>
            public int ValByte { get; set; }

            /// <summary> TYPE_BYTE</summary>
            public bool ValBool { get; set; }

            /// <summary> TYPE_BOOL</summary>
            public ulong ValUint64 { get; set; }

            /// <summary> TYPE_UINT64</summary>
            public byte[] ValWstring { get; set; }

        }

    }

    public partial class CSVCMsgGameEventList
    {
        public List<VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.DescriptorT> Descriptors { get; set; }

        public partial class KeyT
        {
            public int Type { get; set; }

            public string Name { get; set; }

        }

        public partial class DescriptorT
        {
            public int Eventid { get; set; }

            public string Name { get; set; }

            public List<VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.KeyT> Keys { get; set; }

        }

    }

    public partial class CSVCMsgTempEntities
    {
        public bool Reliable { get; set; }

        public int NumEntries { get; set; }

        public byte[] EntityData { get; set; }

    }

    public partial class CSVCMsgPacketEntities
    {
        public int MaxEntries { get; set; }

        public int UpdatedEntries { get; set; }

        public bool IsDelta { get; set; }

        public bool UpdateBaseline { get; set; }

        public int Baseline { get; set; }

        public int DeltaFrom { get; set; }

        public byte[] EntityData { get; set; }

    }

    public partial class CSVCMsgSounds
    {
        public bool ReliableSound { get; set; }

        public List<VBspViewer.Importing.Dem.Generated.CSVCMsgSounds.SounddataT> Sounds { get; set; }

        public partial class SounddataT
        {
            public int OriginX { get; set; }

            public int OriginY { get; set; }

            public int OriginZ { get; set; }

            public uint Volume { get; set; }

            public float DelayValue { get; set; }

            public int SequenceNumber { get; set; }

            public int EntityIndex { get; set; }

            public int Channel { get; set; }

            public int Pitch { get; set; }

            public int Flags { get; set; }

            public uint SoundNum { get; set; }

            public uint SoundNumHandle { get; set; }

            public int SpeakerEntity { get; set; }

            public int RandomSeed { get; set; }

            public int SoundLevel { get; set; }

            /// <summary> soundlevel_t</summary>
            public bool IsSentence { get; set; }

            public bool IsAmbient { get; set; }

        }

    }

    /// <summary>=============================================================================</summary>
    public partial class CCSUsrMsgVGUIMenu
    {
        public string Name { get; set; }

        public bool Show { get; set; }

        public List<VBspViewer.Importing.Dem.Generated.CCSUsrMsgVGUIMenu.Subkey> Subkeys { get; set; }

        public partial class Subkey
        {
            public string Name { get; set; }

            public string Str { get; set; }

        }

    }

    public partial class CCSUsrMsgGeiger
    {
        public int Range { get; set; }

    }

    public partial class CCSUsrMsgTrain
    {
        public int Train { get; set; }

    }

    public partial class CCSUsrMsgHudText
    {
        public string Text { get; set; }

    }

    public partial class CCSUsrMsgSayText
    {
        public int EntIdx { get; set; }

        public string Text { get; set; }

        public bool Chat { get; set; }

        public bool Textallchat { get; set; }

    }

    public partial class CCSUsrMsgSayText2
    {
        public int EntIdx { get; set; }

        public bool Chat { get; set; }

        public string MsgName { get; set; }

        public List<string> Params { get; set; }

        public bool Textallchat { get; set; }

    }

    public partial class CCSUsrMsgTextMsg
    {
        public int MsgDst { get; set; }

        public List<string> Params { get; set; }

    }

    public partial class CCSUsrMsgHudMsg
    {
        public int Channel { get; set; }

        public VBspViewer.Importing.Dem.Generated.CMsgVector2D Pos { get; set; }

        public VBspViewer.Importing.Dem.Generated.CMsgRGBA Clr1 { get; set; }

        public VBspViewer.Importing.Dem.Generated.CMsgRGBA Clr2 { get; set; }

        public int Effect { get; set; }

        public float FadeInTime { get; set; }

        public float FadeOutTime { get; set; }

        public float HoldTime { get; set; }

        public float FxTime { get; set; }

        public string Text { get; set; }

    }

    public partial class CCSUsrMsgShake
    {
        public int Command { get; set; }

        public float LocalAmplitude { get; set; }

        public float Frequency { get; set; }

        public float Duration { get; set; }

    }

    public partial class CCSUsrMsgFade
    {
        public int Duration { get; set; }

        public int HoldTime { get; set; }

        public int Flags { get; set; }

        /// <summary> fade type (in / out)</summary>
        public VBspViewer.Importing.Dem.Generated.CMsgRGBA Clr { get; set; }

    }

    public partial class CCSUsrMsgRumble
    {
        public int Index { get; set; }

        public int Data { get; set; }

        public int Flags { get; set; }

    }

    public partial class CCSUsrMsgCloseCaption
    {
        public uint Hash { get; set; }

        public int Duration { get; set; }

        public bool FromPlayer { get; set; }

    }

    public partial class CCSUsrMsgCloseCaptionDirect
    {
        public uint Hash { get; set; }

        public int Duration { get; set; }

        public bool FromPlayer { get; set; }

    }

    public partial class CCSUsrMsgSendAudio
    {
        public string RadioSound { get; set; }

    }

    public partial class CCSUsrMsgRawAudio
    {
        public int Pitch { get; set; }

        public int Entidx { get; set; }

        public float Duration { get; set; }

        public string VoiceFilename { get; set; }

    }

    public partial class CCSUsrMsgVoiceMask
    {
        public List<VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoiceMask.PlayerMask> PlayerMasks { get; set; }

        public bool PlayerModEnable { get; set; }

        public partial class PlayerMask
        {
            public int GameRulesMask { get; set; }

            public int BanMasks { get; set; }

        }

    }

    public partial class CCSUsrMsgDamage
    {
        public int Amount { get; set; }

        public VBspViewer.Importing.Dem.Generated.CMsgVector InflictorWorldPos { get; set; }

    }

    public partial class CCSUsrMsgRadioText
    {
        public int MsgDst { get; set; }

        public int Client { get; set; }

        public string MsgName { get; set; }

        public List<string> Params { get; set; }

    }

    public partial class CCSUsrMsgHintText
    {
        public string Text { get; set; }

    }

    public partial class CCSUsrMsgKeyHintText
    {
        public List<string> Hints { get; set; }

    }

    public partial class CCSUsrMsgProcessSpottedEntityUpdate
    {
        public bool NewUpdate { get; set; }

        public List<VBspViewer.Importing.Dem.Generated.CCSUsrMsgProcessSpottedEntityUpdate.SpottedEntityUpdate> EntityUpdates { get; set; }

        public partial class SpottedEntityUpdate
        {
            public int EntityIdx { get; set; }

            public int ClassId { get; set; }

            public int OriginX { get; set; }

            public int OriginY { get; set; }

            public int OriginZ { get; set; }

            public int AngleY { get; set; }

            public bool Defuser { get; set; }

            public bool PlayerHasDefuser { get; set; }

            public bool PlayerHasC4 { get; set; }

        }

    }

    public partial class CCSUsrMsgReloadEffect
    {
        public int Entidx { get; set; }

        public int Actanim { get; set; }

    }

    public partial class CCSUsrMsgAdjustMoney
    {
        public int Amount { get; set; }

    }

    public partial class CCSUsrMsgKillCam
    {
        public int ObsMode { get; set; }

        public int FirstTarget { get; set; }

        public int SecondTarget { get; set; }

    }

    public partial class CCSUsrMsgDesiredTimescale
    {
        public float DesiredTimescale { get; set; }

        public float DurationRealtimeSec { get; set; }

        public int InterpolatorType { get; set; }

        public float StartBlendTime { get; set; }

    }

    public partial class CCSUsrMsgCurrentTimescale
    {
        public float CurTimescale { get; set; }

    }

    public partial class CCSUsrMsgAchievementEvent
    {
        public int Achievement { get; set; }

        public int Count { get; set; }

        public int UserId { get; set; }

    }

    public partial class CCSUsrMsgMatchEndConditions
    {
        public int Fraglimit { get; set; }

        public int MpMaxrounds { get; set; }

        public int MpWinlimit { get; set; }

        public int MpTimelimit { get; set; }

    }

    public partial class CCSUsrMsgDisplayInventory
    {
        public bool Display { get; set; }

        public int UserId { get; set; }

    }

    public partial class CCSUsrMsgCallVoteFailed
    {
        public int Reason { get; set; }

        public int Time { get; set; }

    }

    public partial class CCSUsrMsgVoteStart
    {
        public int Team { get; set; }

        public int EntIdx { get; set; }

        public int VoteType { get; set; }

        public string DispStr { get; set; }

        public string DetailsStr { get; set; }

        public string OtherTeamStr { get; set; }

        public bool IsYesNoVote { get; set; }

    }

    public partial class CCSUsrMsgVotePass
    {
        public int Team { get; set; }

        public int VoteType { get; set; }

        public string DispStr { get; set; }

        public string DetailsStr { get; set; }

    }

    public partial class CCSUsrMsgVoteFailed
    {
        public int Team { get; set; }

        public int Reason { get; set; }

    }

    public partial class CCSUsrMsgVoteSetup
    {
        public List<string> PotentialIssues { get; set; }

    }

    public partial class CCSUsrMsgSendLastKillerDamageToClient
    {
        public int NumHitsGiven { get; set; }

        public int DamageGiven { get; set; }

        public int NumHitsTaken { get; set; }

        public int DamageTaken { get; set; }

    }

    public partial class CCSUsrMsgItemPickup
    {
        public string Item { get; set; }

    }

    public partial class CCSUsrMsgShowMenu
    {
        public int BitsValidSlots { get; set; }

        public int DisplayTime { get; set; }

        public string MenuString { get; set; }

    }

    public partial class CCSUsrMsgBarTime
    {
        public string Time { get; set; }

    }

    public partial class CCSUsrMsgAmmoDenied
    {
        public int AmmoIdx { get; set; }

    }

    public partial class CCSUsrMsgMarkAchievement
    {
        public string Achievement { get; set; }

    }

    public partial class CCSUsrMsgItemDrop
    {
        public long Itemid { get; set; }

        public bool Death { get; set; }

    }

    public partial class CCSUsrMsgGlowPropTurnOff
    {
        public int Entidx { get; set; }

    }

    public partial class CCSUsrMsgRoundBackupFilenames
    {
        public int Count { get; set; }

        public int Index { get; set; }

        public string Filename { get; set; }

        public string Nicename { get; set; }

    }

    /// <summary>
    /// <para>=============================================================================</para>
    /// <para> Messages where the data is irrelevant</para>
    /// <para>=============================================================================</para>
    /// </summary>
    public partial class CCSUsrMsgResetHud
    {
        public bool Reset { get; set; }

    }

    public partial class CCSUsrMsgGameTitle
    {
        public int Dummy { get; set; }

    }

    public partial class CCSUsrMsgRequestState
    {
        public int Dummy { get; set; }

    }

    public partial class CCSUsrMsgStopSpectatorMode
    {
        public int Dummy { get; set; }

    }

    public partial class CCSUsrMsgDisconnectToLobby
    {
        public int Dummy { get; set; }

    }

    public partial class CCSUsrMsgWarmupHasEnded
    {
        public int Dummy { get; set; }

    }

    public partial class CCSUsrMsgClientInfo
    {
        public int Dummy { get; set; }

    }

    public enum NETMessages
    {
        net_NOP = 0,
        net_Disconnect = 1,
        /// <summary> disconnect, last message in connection</summary>
        net_File = 2,
        /// <summary> file transmission message request/deny</summary>
        net_Tick = 4,
        /// <summary> s->c world tick, c->s ack world tick</summary>
        net_StringCmd = 5,
        /// <summary> a string command</summary>
        net_SetConVar = 6,
        /// <summary> sends one/multiple convar/userinfo settings</summary>
        net_SignonState = 7,
    }


    public enum SVCMessages
    {
        svc_ServerInfo = 8,
        /// <summary> first message from server about game; map etc</summary>
        svc_SendTable = 9,
        /// <summary> sends a sendtable description for a game class</summary>
        svc_ClassInfo = 10,
        /// <summary> Info about classes (first byte is a CLASSINFO_ define).</summary>
        svc_SetPause = 11,
        /// <summary> tells client if server paused or unpaused</summary>
        svc_CreateStringTable = 12,
        /// <summary> inits shared string tables</summary>
        svc_UpdateStringTable = 13,
        /// <summary> updates a string table</summary>
        svc_VoiceInit = 14,
        /// <summary> inits used voice codecs & quality</summary>
        svc_VoiceData = 15,
        /// <summary> Voicestream data from the server</summary>
        svc_Print = 16,
        /// <summary> print text to console</summary>
        svc_Sounds = 17,
        /// <summary> starts playing sound</summary>
        svc_SetView = 18,
        /// <summary> sets entity as point of view</summary>
        svc_FixAngle = 19,
        /// <summary> sets/corrects players viewangle</summary>
        svc_CrosshairAngle = 20,
        /// <summary> adjusts crosshair in auto aim mode to lock on traget</summary>
        svc_BSPDecal = 21,
        /// <summary> add a static decal to the world BSP</summary>
        svc_UserMessage = 23,
        /// <summary> a game specific message</summary>
        svc_GameEvent = 25,
        /// <summary> global game event fired</summary>
        svc_PacketEntities = 26,
        /// <summary> non-delta compressed entities</summary>
        svc_TempEntities = 27,
        /// <summary> non-reliable event object</summary>
        svc_Prefetch = 28,
        /// <summary> only sound indices for now</summary>
        svc_Menu = 29,
        /// <summary> display a menu from a plugin</summary>
        svc_GameEventList = 30,
        /// <summary> list of known games events and fields</summary>
        svc_GetCvarValue = 31,
    }


    public enum ECstrike15UserMessages
    {
        CS_UM_VGUIMenu = 1,
        CS_UM_Geiger = 2,
        CS_UM_Train = 3,
        CS_UM_HudText = 4,
        CS_UM_SayText = 5,
        CS_UM_SayText2 = 6,
        CS_UM_TextMsg = 7,
        CS_UM_HudMsg = 8,
        CS_UM_ResetHud = 9,
        CS_UM_GameTitle = 10,
        CS_UM_Shake = 12,
        CS_UM_Fade = 13,
        /// <summary> fade HUD in/out</summary>
        CS_UM_Rumble = 14,
        CS_UM_CloseCaption = 15,
        CS_UM_CloseCaptionDirect = 16,
        CS_UM_SendAudio = 17,
        CS_UM_RawAudio = 18,
        CS_UM_VoiceMask = 19,
        CS_UM_RequestState = 20,
        CS_UM_Damage = 21,
        CS_UM_RadioText = 22,
        CS_UM_HintText = 23,
        CS_UM_KeyHintText = 24,
        CS_UM_ProcessSpottedEntityUpdate = 25,
        CS_UM_ReloadEffect = 26,
        CS_UM_AdjustMoney = 27,
        CS_UM_UpdateTeamMoney = 28,
        CS_UM_StopSpectatorMode = 29,
        CS_UM_KillCam = 30,
        CS_UM_DesiredTimescale = 31,
        CS_UM_CurrentTimescale = 32,
        CS_UM_AchievementEvent = 33,
        CS_UM_MatchEndConditions = 34,
        CS_UM_DisconnectToLobby = 35,
        CS_UM_DisplayInventory = 37,
        CS_UM_WarmupHasEnded = 38,
        CS_UM_ClientInfo = 39,
        CS_UM_CallVoteFailed = 45,
        CS_UM_VoteStart = 46,
        CS_UM_VotePass = 47,
        CS_UM_VoteFailed = 48,
        CS_UM_VoteSetup = 49,
        CS_UM_SendLastKillerDamageToClient = 51,
        CS_UM_ItemPickup = 53,
        CS_UM_ShowMenu = 54,
        /// <summary> show hud menu</summary>
        CS_UM_BarTime = 55,
        /// <summary> For the C4 progress bar.</summary>
        CS_UM_AmmoDenied = 56,
        CS_UM_MarkAchievement = 57,
        CS_UM_ItemDrop = 59,
        CS_UM_GlowPropTurnOff = 60,
    }


}
