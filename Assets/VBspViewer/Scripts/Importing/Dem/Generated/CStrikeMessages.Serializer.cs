// This is the backend code for reading and writing

// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
using System;
using System.IO;
using System.Text;
using System.Collections.Generic;

#pragma warning disable 0472, 0162

namespace VBspViewer.Importing.Dem.Generated
{
    [System.Serializable()]
    public partial class CMsgVector
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CMsgVector Deserialize(Stream stream)
        {
            CMsgVector instance = new CMsgVector();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CMsgVector DeserializeLengthDelimited(Stream stream)
        {
            CMsgVector instance = new CMsgVector();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CMsgVector DeserializeLength(Stream stream, int length)
        {
            CMsgVector instance = new CMsgVector();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CMsgVector Deserialize(byte[] buffer)
        {
            CMsgVector instance = new CMsgVector();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CMsgVector Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CMsgVector instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CMsgVector Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CMsgVector instance)
        {
            BinaryReader br = new BinaryReader(stream);
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.X = br.ReadSingle();
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.Y = br.ReadSingle();
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        instance.Z = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CMsgVector DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CMsgVector instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.X = br.ReadSingle();
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.Y = br.ReadSingle();
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        instance.Z = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CMsgVector DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CMsgVector instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.X = br.ReadSingle();
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.Y = br.ReadSingle();
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        instance.Z = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CMsgVector instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Fixed32
            stream.WriteByte(13);
            bw.Write(instance.X);
            // Key for field: 2, Fixed32
            stream.WriteByte(21);
            bw.Write(instance.Y);
            // Key for field: 3, Fixed32
            stream.WriteByte(29);
            bw.Write(instance.Z);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CMsgVector instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CMsgVector instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CMsgVector instance)
        {
            writer.Write("{");
            writer.Write("\"x\":");
            writer.Write(instance.X.ToString());
            writer.Write(",");
            writer.Write("\"y\":");
            writer.Write(instance.Y.ToString());
            writer.Write(",");
            writer.Write("\"z\":");
            writer.Write(instance.Z.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CMsgVector2D
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CMsgVector2D Deserialize(Stream stream)
        {
            CMsgVector2D instance = new CMsgVector2D();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CMsgVector2D DeserializeLengthDelimited(Stream stream)
        {
            CMsgVector2D instance = new CMsgVector2D();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CMsgVector2D DeserializeLength(Stream stream, int length)
        {
            CMsgVector2D instance = new CMsgVector2D();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CMsgVector2D Deserialize(byte[] buffer)
        {
            CMsgVector2D instance = new CMsgVector2D();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CMsgVector2D Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CMsgVector2D instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CMsgVector2D Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CMsgVector2D instance)
        {
            BinaryReader br = new BinaryReader(stream);
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.X = br.ReadSingle();
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.Y = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CMsgVector2D DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CMsgVector2D instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.X = br.ReadSingle();
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.Y = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CMsgVector2D DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CMsgVector2D instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.X = br.ReadSingle();
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.Y = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CMsgVector2D instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Fixed32
            stream.WriteByte(13);
            bw.Write(instance.X);
            // Key for field: 2, Fixed32
            stream.WriteByte(21);
            bw.Write(instance.Y);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CMsgVector2D instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CMsgVector2D instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CMsgVector2D instance)
        {
            writer.Write("{");
            writer.Write("\"x\":");
            writer.Write(instance.X.ToString());
            writer.Write(",");
            writer.Write("\"y\":");
            writer.Write(instance.Y.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CMsgQAngle
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CMsgQAngle Deserialize(Stream stream)
        {
            CMsgQAngle instance = new CMsgQAngle();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CMsgQAngle DeserializeLengthDelimited(Stream stream)
        {
            CMsgQAngle instance = new CMsgQAngle();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CMsgQAngle DeserializeLength(Stream stream, int length)
        {
            CMsgQAngle instance = new CMsgQAngle();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CMsgQAngle Deserialize(byte[] buffer)
        {
            CMsgQAngle instance = new CMsgQAngle();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CMsgQAngle Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CMsgQAngle instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CMsgQAngle Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CMsgQAngle instance)
        {
            BinaryReader br = new BinaryReader(stream);
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.X = br.ReadSingle();
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.Y = br.ReadSingle();
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        instance.Z = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CMsgQAngle DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CMsgQAngle instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.X = br.ReadSingle();
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.Y = br.ReadSingle();
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        instance.Z = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CMsgQAngle DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CMsgQAngle instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.X = br.ReadSingle();
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.Y = br.ReadSingle();
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        instance.Z = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CMsgQAngle instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Fixed32
            stream.WriteByte(13);
            bw.Write(instance.X);
            // Key for field: 2, Fixed32
            stream.WriteByte(21);
            bw.Write(instance.Y);
            // Key for field: 3, Fixed32
            stream.WriteByte(29);
            bw.Write(instance.Z);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CMsgQAngle instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CMsgQAngle instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CMsgQAngle instance)
        {
            writer.Write("{");
            writer.Write("\"x\":");
            writer.Write(instance.X.ToString());
            writer.Write(",");
            writer.Write("\"y\":");
            writer.Write(instance.Y.ToString());
            writer.Write(",");
            writer.Write("\"z\":");
            writer.Write(instance.Z.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CMsgRGBA
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CMsgRGBA Deserialize(Stream stream)
        {
            CMsgRGBA instance = new CMsgRGBA();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CMsgRGBA DeserializeLengthDelimited(Stream stream)
        {
            CMsgRGBA instance = new CMsgRGBA();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CMsgRGBA DeserializeLength(Stream stream, int length)
        {
            CMsgRGBA instance = new CMsgRGBA();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CMsgRGBA Deserialize(byte[] buffer)
        {
            CMsgRGBA instance = new CMsgRGBA();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CMsgRGBA Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CMsgRGBA instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CMsgRGBA Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CMsgRGBA instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.R = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.G = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.B = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.A = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CMsgRGBA DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CMsgRGBA instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.R = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.G = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.B = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.A = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CMsgRGBA DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CMsgRGBA instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.R = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.G = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.B = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.A = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CMsgRGBA instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.R);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.G);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.B);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.A);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CMsgRGBA instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CMsgRGBA instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CMsgRGBA instance)
        {
            writer.Write("{");
            writer.Write("\"r\":");
            writer.Write(instance.R.ToString());
            writer.Write(",");
            writer.Write("\"g\":");
            writer.Write(instance.G.ToString());
            writer.Write(",");
            writer.Write("\"b\":");
            writer.Write(instance.B.ToString());
            writer.Write(",");
            writer.Write("\"a\":");
            writer.Write(instance.A.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CNETMsgTick
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CNETMsgTick Deserialize(Stream stream)
        {
            CNETMsgTick instance = new CNETMsgTick();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CNETMsgTick DeserializeLengthDelimited(Stream stream)
        {
            CNETMsgTick instance = new CNETMsgTick();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CNETMsgTick DeserializeLength(Stream stream, int length)
        {
            CNETMsgTick instance = new CNETMsgTick();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CNETMsgTick Deserialize(byte[] buffer)
        {
            CNETMsgTick instance = new CNETMsgTick();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CNETMsgTick Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CNETMsgTick instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CNETMsgTick Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CNETMsgTick instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Tick = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.HostComputationtime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.HostComputationtimeStdDeviation = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.HostFramestarttimeStdDeviation = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CNETMsgTick DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CNETMsgTick instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Tick = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.HostComputationtime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.HostComputationtimeStdDeviation = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.HostFramestarttimeStdDeviation = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CNETMsgTick DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CNETMsgTick instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Tick = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.HostComputationtime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.HostComputationtimeStdDeviation = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.HostFramestarttimeStdDeviation = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CNETMsgTick instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream,(uint)instance.Tick);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream,(uint)instance.HostComputationtime);
            // Key for field: 5, Varint
            stream.WriteByte(40);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream,(uint)instance.HostComputationtimeStdDeviation);
            // Key for field: 6, Varint
            stream.WriteByte(48);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream,(uint)instance.HostFramestarttimeStdDeviation);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CNETMsgTick instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CNETMsgTick instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CNETMsgTick instance)
        {
            writer.Write("{");
            writer.Write("\"tick\":");
            writer.Write(instance.Tick.ToString());
            writer.Write(",");
            writer.Write("\"host_computationtime\":");
            writer.Write(instance.HostComputationtime.ToString());
            writer.Write(",");
            writer.Write("\"host_computationtime_std_deviation\":");
            writer.Write(instance.HostComputationtimeStdDeviation.ToString());
            writer.Write(",");
            writer.Write("\"host_framestarttime_std_deviation\":");
            writer.Write(instance.HostFramestarttimeStdDeviation.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CNETMsgStringCmd
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CNETMsgStringCmd Deserialize(Stream stream)
        {
            CNETMsgStringCmd instance = new CNETMsgStringCmd();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CNETMsgStringCmd DeserializeLengthDelimited(Stream stream)
        {
            CNETMsgStringCmd instance = new CNETMsgStringCmd();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CNETMsgStringCmd DeserializeLength(Stream stream, int length)
        {
            CNETMsgStringCmd instance = new CNETMsgStringCmd();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CNETMsgStringCmd Deserialize(byte[] buffer)
        {
            CNETMsgStringCmd instance = new CNETMsgStringCmd();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CNETMsgStringCmd Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CNETMsgStringCmd instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CNETMsgStringCmd Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CNETMsgStringCmd instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Command = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CNETMsgStringCmd DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CNETMsgStringCmd instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Command = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CNETMsgStringCmd DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CNETMsgStringCmd instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Command = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CNETMsgStringCmd instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.Command != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Command));
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CNETMsgStringCmd instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CNETMsgStringCmd instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CNETMsgStringCmd instance)
        {
            writer.Write("{");
            writer.Write("\"command\":");
            if (instance.Command != null)
            {
                writer.Write("\"" + instance.Command + "\"");
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CNETMsgSignonState
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CNETMsgSignonState Deserialize(Stream stream)
        {
            CNETMsgSignonState instance = new CNETMsgSignonState();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CNETMsgSignonState DeserializeLengthDelimited(Stream stream)
        {
            CNETMsgSignonState instance = new CNETMsgSignonState();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CNETMsgSignonState DeserializeLength(Stream stream, int length)
        {
            CNETMsgSignonState instance = new CNETMsgSignonState();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CNETMsgSignonState Deserialize(byte[] buffer)
        {
            CNETMsgSignonState instance = new CNETMsgSignonState();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CNETMsgSignonState Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CNETMsgSignonState instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CNETMsgSignonState Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CNETMsgSignonState instance)
        {
            if (instance.PlayersNetworkids == null)
                instance.PlayersNetworkids = new List<string>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.SignonState = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.SpawnCount = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.NumServerPlayers = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        // repeated
                        instance.PlayersNetworkids.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        instance.MapName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CNETMsgSignonState DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CNETMsgSignonState instance)
        {
            if (instance.PlayersNetworkids == null)
                instance.PlayersNetworkids = new List<string>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.SignonState = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.SpawnCount = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.NumServerPlayers = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        // repeated
                        instance.PlayersNetworkids.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        instance.MapName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CNETMsgSignonState DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CNETMsgSignonState instance)
        {
            if (instance.PlayersNetworkids == null)
                instance.PlayersNetworkids = new List<string>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.SignonState = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.SpawnCount = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.NumServerPlayers = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        // repeated
                        instance.PlayersNetworkids.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        instance.MapName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CNETMsgSignonState instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream,(uint)instance.SignonState);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream,(uint)instance.SpawnCount);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream,(uint)instance.NumServerPlayers);
            if (instance.PlayersNetworkids != null)
            {
                foreach (var i4 in instance.PlayersNetworkids)
                {
                    // Key for field: 4, LengthDelimited
                    stream.WriteByte(34);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(i4));
                }
            }
            if (instance.MapName != null)
            {
                // Key for field: 5, LengthDelimited
                stream.WriteByte(42);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.MapName));
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CNETMsgSignonState instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CNETMsgSignonState instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CNETMsgSignonState instance)
        {
            writer.Write("{");
            writer.Write("\"signon_state\":");
            writer.Write(instance.SignonState.ToString());
            writer.Write(",");
            writer.Write("\"spawn_count\":");
            writer.Write(instance.SpawnCount.ToString());
            writer.Write(",");
            writer.Write("\"num_server_players\":");
            writer.Write(instance.NumServerPlayers.ToString());
            writer.Write(",");
            writer.Write("\"players_networkids\":");

            if (instance.PlayersNetworkids != null)
            {
                writer.Write("[");
                var first = true;
                foreach (var i4 in instance.PlayersNetworkids)
                {
                    if (!first) writer.Write(",");
                    else first = false;
                    writer.Write("\"" + i4 + "\"");
                }
                writer.Write("]");
            }
            else
            {
                writer.Write("null");
            }
            writer.Write(",");
            writer.Write("\"map_name\":");
            if (instance.MapName != null)
            {
                writer.Write("\"" + instance.MapName + "\"");
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CMsgCVars
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CMsgCVars Deserialize(Stream stream)
        {
            CMsgCVars instance = new CMsgCVars();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CMsgCVars DeserializeLengthDelimited(Stream stream)
        {
            CMsgCVars instance = new CMsgCVars();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CMsgCVars DeserializeLength(Stream stream, int length)
        {
            CMsgCVars instance = new CMsgCVars();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CMsgCVars Deserialize(byte[] buffer)
        {
            CMsgCVars instance = new CMsgCVars();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CMsgCVars Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CMsgCVars instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CMsgCVars Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CMsgCVars instance)
        {
            if (instance.Cvars == null)
                instance.Cvars = new List<VBspViewer.Importing.Dem.Generated.CMsgCVars.CVar>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.Cvars.Add(VBspViewer.Importing.Dem.Generated.CMsgCVars.CVar.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CMsgCVars DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CMsgCVars instance)
        {
            if (instance.Cvars == null)
                instance.Cvars = new List<VBspViewer.Importing.Dem.Generated.CMsgCVars.CVar>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.Cvars.Add(VBspViewer.Importing.Dem.Generated.CMsgCVars.CVar.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CMsgCVars DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CMsgCVars instance)
        {
            if (instance.Cvars == null)
                instance.Cvars = new List<VBspViewer.Importing.Dem.Generated.CMsgCVars.CVar>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.Cvars.Add(VBspViewer.Importing.Dem.Generated.CMsgCVars.CVar.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CMsgCVars instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.Cvars != null)
            {
                foreach (var i1 in instance.Cvars)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    ﻿msField.SetLength(0);
                    VBspViewer.Importing.Dem.Generated.CMsgCVars.CVar.Serialize(msField, i1);
                    // Length delimited byte array
                    uint length1 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                    stream.Write(msField.GetBuffer(), 0, (int)length1);

                }
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CMsgCVars instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CMsgCVars instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CMsgCVars instance)
        {
            writer.Write("{");
            writer.Write("\"cvars\":");

            if (instance.Cvars != null)
            {
                writer.Write("[");
                var first = true;
                foreach (var i1 in instance.Cvars)
                {
                    if (!first) writer.Write(",");
                    else first = false;
                    ﻿VBspViewer.Importing.Dem.Generated.CMsgCVars.CVar.SerializeJson(writer, i1);

                }
                writer.Write("]");
            }
            else
            {
                writer.Write("null");
            }
            writer.Write("}");
        }

        [System.Serializable()]
        public partial class CVar
        {
            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static CVar Deserialize(Stream stream)
            {
                CVar instance = new CVar();
                Deserialize(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static CVar DeserializeLengthDelimited(Stream stream)
            {
                CVar instance = new CVar();
                DeserializeLengthDelimited(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static CVar DeserializeLength(Stream stream, int length)
            {
                CVar instance = new CVar();
                DeserializeLength(stream, length, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
            public static CVar Deserialize(byte[] buffer)
            {
                CVar instance = new CVar();
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Load this value from a proto buffer</summary>
            public void FromProto(Stream stream)
            {
                Deserialize(stream, this );
            }

            /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
            public static VBspViewer.Importing.Dem.Generated.CMsgCVars.CVar Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CMsgCVars.CVar instance)
            {
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
            public static VBspViewer.Importing.Dem.Generated.CMsgCVars.CVar Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CMsgCVars.CVar instance)
            {
                while (true)
                {
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        break;
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 LengthDelimited
                        case 10:
                            instance.Name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.Value = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static VBspViewer.Importing.Dem.Generated.CMsgCVars.CVar DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CMsgCVars.CVar instance)
            {
                long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                limit += stream.Position;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 LengthDelimited
                        case 10:
                            instance.Name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.Value = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static VBspViewer.Importing.Dem.Generated.CMsgCVars.CVar DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CMsgCVars.CVar instance)
            {
                long limit = stream.Position + length;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 LengthDelimited
                        case 10:
                            instance.Name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.Value = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Serialize the instance into the stream</summary>
            public static void Serialize(Stream stream, CVar instance)
            {
                var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
                if (instance.Name != null)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Name));
                }
                if (instance.Value != null)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Value));
                }
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
            }

            /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
            public byte[] ToProtoBytes()
            {
                return SerializeToBytes( this );
            }

            /// <summary>Serialize to a Stream</summary>
            public void ToProto( Stream stream )
            {
                Serialize( stream, this );
            }

            /// <summary>Serialize to a JSON string</summary>
            public string ToJson()
            {
                var writer = new global::System.IO.StringWriter();
                SerializeJson(writer, this);
                return writer.ToString();
            }

            /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
            public static byte[] SerializeToBytes(CVar instance)
            {
                using (var ms = new MemoryStream())
                {
                    Serialize(ms, instance);
                    return ms.ToArray();
                }
            }
            /// <summary>Helper: Serialize with a varint length prefix</summary>
            public static void SerializeLengthDelimited(Stream stream, CVar instance)
            {
                var data = SerializeToBytes(instance);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
                stream.Write(data, 0, data.Length);
            }
            /// <summary>Serialize into a JSON string</summary>
            public static void SerializeJson(TextWriter writer, CVar instance)
            {
                writer.Write("{");
                writer.Write("\"name\":");
                if (instance.Name != null)
                {
                    writer.Write("\"" + instance.Name + "\"");
                }
                writer.Write(",");
                writer.Write("\"value\":");
                if (instance.Value != null)
                {
                    writer.Write("\"" + instance.Value + "\"");
                }
                writer.Write("}");
            }
        }

    }

    [System.Serializable()]
    public partial class CNETMsgSetConVar
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CNETMsgSetConVar Deserialize(Stream stream)
        {
            CNETMsgSetConVar instance = new CNETMsgSetConVar();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CNETMsgSetConVar DeserializeLengthDelimited(Stream stream)
        {
            CNETMsgSetConVar instance = new CNETMsgSetConVar();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CNETMsgSetConVar DeserializeLength(Stream stream, int length)
        {
            CNETMsgSetConVar instance = new CNETMsgSetConVar();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CNETMsgSetConVar Deserialize(byte[] buffer)
        {
            CNETMsgSetConVar instance = new CNETMsgSetConVar();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CNETMsgSetConVar Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CNETMsgSetConVar instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CNETMsgSetConVar Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CNETMsgSetConVar instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Convars == null)
                            instance.Convars = VBspViewer.Importing.Dem.Generated.CMsgCVars.DeserializeLengthDelimited(stream);
                        else
                            VBspViewer.Importing.Dem.Generated.CMsgCVars.DeserializeLengthDelimited(stream, instance.Convars);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CNETMsgSetConVar DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CNETMsgSetConVar instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Convars == null)
                            instance.Convars = VBspViewer.Importing.Dem.Generated.CMsgCVars.DeserializeLengthDelimited(stream);
                        else
                            VBspViewer.Importing.Dem.Generated.CMsgCVars.DeserializeLengthDelimited(stream, instance.Convars);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CNETMsgSetConVar DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CNETMsgSetConVar instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Convars == null)
                            instance.Convars = VBspViewer.Importing.Dem.Generated.CMsgCVars.DeserializeLengthDelimited(stream);
                        else
                            VBspViewer.Importing.Dem.Generated.CMsgCVars.DeserializeLengthDelimited(stream, instance.Convars);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CNETMsgSetConVar instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.Convars != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                ﻿msField.SetLength(0);
                VBspViewer.Importing.Dem.Generated.CMsgCVars.Serialize(msField, instance.Convars);
                // Length delimited byte array
                uint length1 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                stream.Write(msField.GetBuffer(), 0, (int)length1);

            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CNETMsgSetConVar instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CNETMsgSetConVar instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CNETMsgSetConVar instance)
        {
            writer.Write("{");
            writer.Write("\"convars\":");
            if (instance.Convars != null)
            {
                ﻿VBspViewer.Importing.Dem.Generated.CMsgCVars.SerializeJson(writer, instance.Convars);

            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CNETMsgNOP
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CNETMsgNOP Deserialize(Stream stream)
        {
            CNETMsgNOP instance = new CNETMsgNOP();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CNETMsgNOP DeserializeLengthDelimited(Stream stream)
        {
            CNETMsgNOP instance = new CNETMsgNOP();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CNETMsgNOP DeserializeLength(Stream stream, int length)
        {
            CNETMsgNOP instance = new CNETMsgNOP();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CNETMsgNOP Deserialize(byte[] buffer)
        {
            CNETMsgNOP instance = new CNETMsgNOP();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CNETMsgNOP Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CNETMsgNOP instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CNETMsgNOP Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CNETMsgNOP instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CNETMsgNOP DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CNETMsgNOP instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CNETMsgNOP DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CNETMsgNOP instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CNETMsgNOP instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CNETMsgNOP instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CNETMsgNOP instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CNETMsgNOP instance)
        {
            writer.Write("{");
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CNETMsgDisconnect
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CNETMsgDisconnect Deserialize(Stream stream)
        {
            CNETMsgDisconnect instance = new CNETMsgDisconnect();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CNETMsgDisconnect DeserializeLengthDelimited(Stream stream)
        {
            CNETMsgDisconnect instance = new CNETMsgDisconnect();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CNETMsgDisconnect DeserializeLength(Stream stream, int length)
        {
            CNETMsgDisconnect instance = new CNETMsgDisconnect();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CNETMsgDisconnect Deserialize(byte[] buffer)
        {
            CNETMsgDisconnect instance = new CNETMsgDisconnect();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CNETMsgDisconnect Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CNETMsgDisconnect instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CNETMsgDisconnect Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CNETMsgDisconnect instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Text = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CNETMsgDisconnect DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CNETMsgDisconnect instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Text = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CNETMsgDisconnect DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CNETMsgDisconnect instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Text = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CNETMsgDisconnect instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.Text != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Text));
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CNETMsgDisconnect instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CNETMsgDisconnect instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CNETMsgDisconnect instance)
        {
            writer.Write("{");
            writer.Write("\"text\":");
            if (instance.Text != null)
            {
                writer.Write("\"" + instance.Text + "\"");
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CNETMsgFile
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CNETMsgFile Deserialize(Stream stream)
        {
            CNETMsgFile instance = new CNETMsgFile();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CNETMsgFile DeserializeLengthDelimited(Stream stream)
        {
            CNETMsgFile instance = new CNETMsgFile();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CNETMsgFile DeserializeLength(Stream stream, int length)
        {
            CNETMsgFile instance = new CNETMsgFile();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CNETMsgFile Deserialize(byte[] buffer)
        {
            CNETMsgFile instance = new CNETMsgFile();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CNETMsgFile Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CNETMsgFile instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CNETMsgFile Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CNETMsgFile instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.TransferId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.FileName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.IsReplayDemoFile = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.Deny = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CNETMsgFile DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CNETMsgFile instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.TransferId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.FileName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.IsReplayDemoFile = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.Deny = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CNETMsgFile DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CNETMsgFile instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.TransferId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.FileName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.IsReplayDemoFile = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.Deny = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CNETMsgFile instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.TransferId);
            if (instance.FileName != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.FileName));
            }
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.IsReplayDemoFile);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.Deny);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CNETMsgFile instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CNETMsgFile instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CNETMsgFile instance)
        {
            writer.Write("{");
            writer.Write("\"transfer_id\":");
            writer.Write(instance.TransferId.ToString());
            writer.Write(",");
            writer.Write("\"file_name\":");
            if (instance.FileName != null)
            {
                writer.Write("\"" + instance.FileName + "\"");
            }
            writer.Write(",");
            writer.Write("\"is_replay_demo_file\":");
            writer.Write(instance.IsReplayDemoFile ? "true" : "false");
            writer.Write(",");
            writer.Write("\"deny\":");
            writer.Write(instance.Deny ? "true" : "false");
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CSVCMsgServerInfo
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgServerInfo Deserialize(Stream stream)
        {
            CSVCMsgServerInfo instance = new CSVCMsgServerInfo();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgServerInfo DeserializeLengthDelimited(Stream stream)
        {
            CSVCMsgServerInfo instance = new CSVCMsgServerInfo();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgServerInfo DeserializeLength(Stream stream, int length)
        {
            CSVCMsgServerInfo instance = new CSVCMsgServerInfo();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSVCMsgServerInfo Deserialize(byte[] buffer)
        {
            CSVCMsgServerInfo instance = new CSVCMsgServerInfo();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgServerInfo Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CSVCMsgServerInfo instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgServerInfo Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgServerInfo instance)
        {
            BinaryReader br = new BinaryReader(stream);
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Protocol = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.ServerCount = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.IsDedicated = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.IsOfficialValveServer = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.IsHltv = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.IsReplay = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 7 Varint
                    case 56:
                        instance.COs = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 8 Fixed32
                    case 69:
                        instance.MapCrc = br.ReadUInt32();
                        continue;
                    // Field 9 Fixed32
                    case 77:
                        instance.ClientCrc = br.ReadUInt32();
                        continue;
                    // Field 10 Fixed32
                    case 85:
                        instance.StringTableCrc = br.ReadUInt32();
                        continue;
                    // Field 11 Varint
                    case 88:
                        instance.MaxClients = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 12 Varint
                    case 96:
                        instance.MaxClasses = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 13 Varint
                    case 104:
                        instance.PlayerSlot = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 14 Fixed32
                    case 117:
                        instance.TickInterval = br.ReadSingle();
                        continue;
                    // Field 15 LengthDelimited
                    case 122:
                        instance.GameDir = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    case 21:
                        if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                            break;
                        instance.IsRedirectingToProxyRelay = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    case 16:
                        if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.LengthDelimited)
                            break;
                        instance.MapName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    case 17:
                        if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.LengthDelimited)
                            break;
                        instance.MapGroupName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    case 18:
                        if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.LengthDelimited)
                            break;
                        instance.SkyName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    case 19:
                        if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.LengthDelimited)
                            break;
                        instance.HostName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    case 22:
                        if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                            break;
                        instance.UgcMapId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgServerInfo DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgServerInfo instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Protocol = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.ServerCount = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.IsDedicated = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.IsOfficialValveServer = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.IsHltv = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.IsReplay = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 7 Varint
                    case 56:
                        instance.COs = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 8 Fixed32
                    case 69:
                        instance.MapCrc = br.ReadUInt32();
                        continue;
                    // Field 9 Fixed32
                    case 77:
                        instance.ClientCrc = br.ReadUInt32();
                        continue;
                    // Field 10 Fixed32
                    case 85:
                        instance.StringTableCrc = br.ReadUInt32();
                        continue;
                    // Field 11 Varint
                    case 88:
                        instance.MaxClients = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 12 Varint
                    case 96:
                        instance.MaxClasses = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 13 Varint
                    case 104:
                        instance.PlayerSlot = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 14 Fixed32
                    case 117:
                        instance.TickInterval = br.ReadSingle();
                        continue;
                    // Field 15 LengthDelimited
                    case 122:
                        instance.GameDir = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    case 21:
                        if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                            break;
                        instance.IsRedirectingToProxyRelay = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    case 16:
                        if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.LengthDelimited)
                            break;
                        instance.MapName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    case 17:
                        if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.LengthDelimited)
                            break;
                        instance.MapGroupName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    case 18:
                        if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.LengthDelimited)
                            break;
                        instance.SkyName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    case 19:
                        if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.LengthDelimited)
                            break;
                        instance.HostName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    case 22:
                        if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                            break;
                        instance.UgcMapId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgServerInfo DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CSVCMsgServerInfo instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Protocol = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.ServerCount = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.IsDedicated = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.IsOfficialValveServer = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.IsHltv = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.IsReplay = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 7 Varint
                    case 56:
                        instance.COs = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 8 Fixed32
                    case 69:
                        instance.MapCrc = br.ReadUInt32();
                        continue;
                    // Field 9 Fixed32
                    case 77:
                        instance.ClientCrc = br.ReadUInt32();
                        continue;
                    // Field 10 Fixed32
                    case 85:
                        instance.StringTableCrc = br.ReadUInt32();
                        continue;
                    // Field 11 Varint
                    case 88:
                        instance.MaxClients = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 12 Varint
                    case 96:
                        instance.MaxClasses = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 13 Varint
                    case 104:
                        instance.PlayerSlot = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 14 Fixed32
                    case 117:
                        instance.TickInterval = br.ReadSingle();
                        continue;
                    // Field 15 LengthDelimited
                    case 122:
                        instance.GameDir = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    case 21:
                        if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                            break;
                        instance.IsRedirectingToProxyRelay = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    case 16:
                        if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.LengthDelimited)
                            break;
                        instance.MapName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    case 17:
                        if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.LengthDelimited)
                            break;
                        instance.MapGroupName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    case 18:
                        if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.LengthDelimited)
                            break;
                        instance.SkyName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    case 19:
                        if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.LengthDelimited)
                            break;
                        instance.HostName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    case 22:
                        if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                            break;
                        instance.UgcMapId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSVCMsgServerInfo instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Protocol);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.ServerCount);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.IsDedicated);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.IsOfficialValveServer);
            // Key for field: 5, Varint
            stream.WriteByte(40);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.IsHltv);
            // Key for field: 6, Varint
            stream.WriteByte(48);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.IsReplay);
            // Key for field: 21, Varint
            stream.WriteByte(168);
            stream.WriteByte(1);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.IsRedirectingToProxyRelay);
            // Key for field: 7, Varint
            stream.WriteByte(56);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.COs);
            // Key for field: 8, Fixed32
            stream.WriteByte(69);
            bw.Write(instance.MapCrc);
            // Key for field: 9, Fixed32
            stream.WriteByte(77);
            bw.Write(instance.ClientCrc);
            // Key for field: 10, Fixed32
            stream.WriteByte(85);
            bw.Write(instance.StringTableCrc);
            // Key for field: 11, Varint
            stream.WriteByte(88);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.MaxClients);
            // Key for field: 12, Varint
            stream.WriteByte(96);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.MaxClasses);
            // Key for field: 13, Varint
            stream.WriteByte(104);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.PlayerSlot);
            // Key for field: 14, Fixed32
            stream.WriteByte(117);
            bw.Write(instance.TickInterval);
            if (instance.GameDir != null)
            {
                // Key for field: 15, LengthDelimited
                stream.WriteByte(122);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.GameDir));
            }
            if (instance.MapName != null)
            {
                // Key for field: 16, LengthDelimited
                stream.WriteByte(130);
                stream.WriteByte(1);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.MapName));
            }
            if (instance.MapGroupName != null)
            {
                // Key for field: 17, LengthDelimited
                stream.WriteByte(138);
                stream.WriteByte(1);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.MapGroupName));
            }
            if (instance.SkyName != null)
            {
                // Key for field: 18, LengthDelimited
                stream.WriteByte(146);
                stream.WriteByte(1);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.SkyName));
            }
            if (instance.HostName != null)
            {
                // Key for field: 19, LengthDelimited
                stream.WriteByte(154);
                stream.WriteByte(1);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.HostName));
            }
            // Key for field: 22, Varint
            stream.WriteByte(176);
            stream.WriteByte(1);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream, instance.UgcMapId);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSVCMsgServerInfo instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSVCMsgServerInfo instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CSVCMsgServerInfo instance)
        {
            writer.Write("{");
            writer.Write("\"protocol\":");
            writer.Write(instance.Protocol.ToString());
            writer.Write(",");
            writer.Write("\"server_count\":");
            writer.Write(instance.ServerCount.ToString());
            writer.Write(",");
            writer.Write("\"is_dedicated\":");
            writer.Write(instance.IsDedicated ? "true" : "false");
            writer.Write(",");
            writer.Write("\"is_official_valve_server\":");
            writer.Write(instance.IsOfficialValveServer ? "true" : "false");
            writer.Write(",");
            writer.Write("\"is_hltv\":");
            writer.Write(instance.IsHltv ? "true" : "false");
            writer.Write(",");
            writer.Write("\"is_replay\":");
            writer.Write(instance.IsReplay ? "true" : "false");
            writer.Write(",");
            writer.Write("\"is_redirecting_to_proxy_relay\":");
            writer.Write(instance.IsRedirectingToProxyRelay ? "true" : "false");
            writer.Write(",");
            writer.Write("\"c_os\":");
            writer.Write(instance.COs.ToString());
            writer.Write(",");
            writer.Write("\"map_crc\":");
            writer.Write(instance.MapCrc.ToString());
            writer.Write(",");
            writer.Write("\"client_crc\":");
            writer.Write(instance.ClientCrc.ToString());
            writer.Write(",");
            writer.Write("\"string_table_crc\":");
            writer.Write(instance.StringTableCrc.ToString());
            writer.Write(",");
            writer.Write("\"max_clients\":");
            writer.Write(instance.MaxClients.ToString());
            writer.Write(",");
            writer.Write("\"max_classes\":");
            writer.Write(instance.MaxClasses.ToString());
            writer.Write(",");
            writer.Write("\"player_slot\":");
            writer.Write(instance.PlayerSlot.ToString());
            writer.Write(",");
            writer.Write("\"tick_interval\":");
            writer.Write(instance.TickInterval.ToString());
            writer.Write(",");
            writer.Write("\"game_dir\":");
            if (instance.GameDir != null)
            {
                writer.Write("\"" + instance.GameDir + "\"");
            }
            writer.Write(",");
            writer.Write("\"map_name\":");
            if (instance.MapName != null)
            {
                writer.Write("\"" + instance.MapName + "\"");
            }
            writer.Write(",");
            writer.Write("\"map_group_name\":");
            if (instance.MapGroupName != null)
            {
                writer.Write("\"" + instance.MapGroupName + "\"");
            }
            writer.Write(",");
            writer.Write("\"sky_name\":");
            if (instance.SkyName != null)
            {
                writer.Write("\"" + instance.SkyName + "\"");
            }
            writer.Write(",");
            writer.Write("\"host_name\":");
            if (instance.HostName != null)
            {
                writer.Write("\"" + instance.HostName + "\"");
            }
            writer.Write(",");
            writer.Write("\"ugc_map_id\":");
            writer.Write(instance.UgcMapId.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CSVCMsgClassInfo
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgClassInfo Deserialize(Stream stream)
        {
            CSVCMsgClassInfo instance = new CSVCMsgClassInfo();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgClassInfo DeserializeLengthDelimited(Stream stream)
        {
            CSVCMsgClassInfo instance = new CSVCMsgClassInfo();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgClassInfo DeserializeLength(Stream stream, int length)
        {
            CSVCMsgClassInfo instance = new CSVCMsgClassInfo();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSVCMsgClassInfo Deserialize(byte[] buffer)
        {
            CSVCMsgClassInfo instance = new CSVCMsgClassInfo();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgClassInfo Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CSVCMsgClassInfo instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgClassInfo Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgClassInfo instance)
        {
            if (instance.Classes == null)
                instance.Classes = new List<VBspViewer.Importing.Dem.Generated.CSVCMsgClassInfo.ClassT>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.CreateOnClient = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        instance.Classes.Add(VBspViewer.Importing.Dem.Generated.CSVCMsgClassInfo.ClassT.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgClassInfo DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgClassInfo instance)
        {
            if (instance.Classes == null)
                instance.Classes = new List<VBspViewer.Importing.Dem.Generated.CSVCMsgClassInfo.ClassT>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.CreateOnClient = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        instance.Classes.Add(VBspViewer.Importing.Dem.Generated.CSVCMsgClassInfo.ClassT.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgClassInfo DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CSVCMsgClassInfo instance)
        {
            if (instance.Classes == null)
                instance.Classes = new List<VBspViewer.Importing.Dem.Generated.CSVCMsgClassInfo.ClassT>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.CreateOnClient = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        instance.Classes.Add(VBspViewer.Importing.Dem.Generated.CSVCMsgClassInfo.ClassT.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSVCMsgClassInfo instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.CreateOnClient);
            if (instance.Classes != null)
            {
                foreach (var i2 in instance.Classes)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    ﻿msField.SetLength(0);
                    VBspViewer.Importing.Dem.Generated.CSVCMsgClassInfo.ClassT.Serialize(msField, i2);
                    // Length delimited byte array
                    uint length2 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                    stream.Write(msField.GetBuffer(), 0, (int)length2);

                }
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSVCMsgClassInfo instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSVCMsgClassInfo instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CSVCMsgClassInfo instance)
        {
            writer.Write("{");
            writer.Write("\"create_on_client\":");
            writer.Write(instance.CreateOnClient ? "true" : "false");
            writer.Write(",");
            writer.Write("\"classes\":");

            if (instance.Classes != null)
            {
                writer.Write("[");
                var first = true;
                foreach (var i2 in instance.Classes)
                {
                    if (!first) writer.Write(",");
                    else first = false;
                    ﻿VBspViewer.Importing.Dem.Generated.CSVCMsgClassInfo.ClassT.SerializeJson(writer, i2);

                }
                writer.Write("]");
            }
            else
            {
                writer.Write("null");
            }
            writer.Write("}");
        }

        [System.Serializable()]
        public partial class ClassT
        {
            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static ClassT Deserialize(Stream stream)
            {
                ClassT instance = new ClassT();
                Deserialize(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static ClassT DeserializeLengthDelimited(Stream stream)
            {
                ClassT instance = new ClassT();
                DeserializeLengthDelimited(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static ClassT DeserializeLength(Stream stream, int length)
            {
                ClassT instance = new ClassT();
                DeserializeLength(stream, length, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
            public static ClassT Deserialize(byte[] buffer)
            {
                ClassT instance = new ClassT();
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Load this value from a proto buffer</summary>
            public void FromProto(Stream stream)
            {
                Deserialize(stream, this );
            }

            /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
            public static VBspViewer.Importing.Dem.Generated.CSVCMsgClassInfo.ClassT Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CSVCMsgClassInfo.ClassT instance)
            {
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
            public static VBspViewer.Importing.Dem.Generated.CSVCMsgClassInfo.ClassT Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgClassInfo.ClassT instance)
            {
                while (true)
                {
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        break;
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.ClassId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.DataTableName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                        // Field 3 LengthDelimited
                        case 26:
                            instance.ClassName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static VBspViewer.Importing.Dem.Generated.CSVCMsgClassInfo.ClassT DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgClassInfo.ClassT instance)
            {
                long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                limit += stream.Position;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.ClassId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.DataTableName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                        // Field 3 LengthDelimited
                        case 26:
                            instance.ClassName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static VBspViewer.Importing.Dem.Generated.CSVCMsgClassInfo.ClassT DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CSVCMsgClassInfo.ClassT instance)
            {
                long limit = stream.Position + length;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.ClassId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.DataTableName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                        // Field 3 LengthDelimited
                        case 26:
                            instance.ClassName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Serialize the instance into the stream</summary>
            public static void Serialize(Stream stream, ClassT instance)
            {
                var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
                // Key for field: 1, Varint
                stream.WriteByte(8);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.ClassId);
                if (instance.DataTableName != null)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.DataTableName));
                }
                if (instance.ClassName != null)
                {
                    // Key for field: 3, LengthDelimited
                    stream.WriteByte(26);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.ClassName));
                }
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
            }

            /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
            public byte[] ToProtoBytes()
            {
                return SerializeToBytes( this );
            }

            /// <summary>Serialize to a Stream</summary>
            public void ToProto( Stream stream )
            {
                Serialize( stream, this );
            }

            /// <summary>Serialize to a JSON string</summary>
            public string ToJson()
            {
                var writer = new global::System.IO.StringWriter();
                SerializeJson(writer, this);
                return writer.ToString();
            }

            /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
            public static byte[] SerializeToBytes(ClassT instance)
            {
                using (var ms = new MemoryStream())
                {
                    Serialize(ms, instance);
                    return ms.ToArray();
                }
            }
            /// <summary>Helper: Serialize with a varint length prefix</summary>
            public static void SerializeLengthDelimited(Stream stream, ClassT instance)
            {
                var data = SerializeToBytes(instance);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
                stream.Write(data, 0, data.Length);
            }
            /// <summary>Serialize into a JSON string</summary>
            public static void SerializeJson(TextWriter writer, ClassT instance)
            {
                writer.Write("{");
                writer.Write("\"class_id\":");
                writer.Write(instance.ClassId.ToString());
                writer.Write(",");
                writer.Write("\"data_table_name\":");
                if (instance.DataTableName != null)
                {
                    writer.Write("\"" + instance.DataTableName + "\"");
                }
                writer.Write(",");
                writer.Write("\"class_name\":");
                if (instance.ClassName != null)
                {
                    writer.Write("\"" + instance.ClassName + "\"");
                }
                writer.Write("}");
            }
        }

    }

    [System.Serializable()]
    public partial class CSVCMsgSendTable
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgSendTable Deserialize(Stream stream)
        {
            CSVCMsgSendTable instance = new CSVCMsgSendTable();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgSendTable DeserializeLengthDelimited(Stream stream)
        {
            CSVCMsgSendTable instance = new CSVCMsgSendTable();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgSendTable DeserializeLength(Stream stream, int length)
        {
            CSVCMsgSendTable instance = new CSVCMsgSendTable();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSVCMsgSendTable Deserialize(byte[] buffer)
        {
            CSVCMsgSendTable instance = new CSVCMsgSendTable();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgSendTable Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CSVCMsgSendTable instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgSendTable Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgSendTable instance)
        {
            if (instance.Props == null)
                instance.Props = new List<VBspViewer.Importing.Dem.Generated.CSVCMsgSendTable.SendpropT>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.IsEnd = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.NetTableName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.NeedsDecoder = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        // repeated
                        instance.Props.Add(VBspViewer.Importing.Dem.Generated.CSVCMsgSendTable.SendpropT.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgSendTable DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgSendTable instance)
        {
            if (instance.Props == null)
                instance.Props = new List<VBspViewer.Importing.Dem.Generated.CSVCMsgSendTable.SendpropT>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.IsEnd = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.NetTableName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.NeedsDecoder = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        // repeated
                        instance.Props.Add(VBspViewer.Importing.Dem.Generated.CSVCMsgSendTable.SendpropT.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgSendTable DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CSVCMsgSendTable instance)
        {
            if (instance.Props == null)
                instance.Props = new List<VBspViewer.Importing.Dem.Generated.CSVCMsgSendTable.SendpropT>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.IsEnd = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.NetTableName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.NeedsDecoder = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        // repeated
                        instance.Props.Add(VBspViewer.Importing.Dem.Generated.CSVCMsgSendTable.SendpropT.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSVCMsgSendTable instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.IsEnd);
            if (instance.NetTableName != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.NetTableName));
            }
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.NeedsDecoder);
            if (instance.Props != null)
            {
                foreach (var i4 in instance.Props)
                {
                    // Key for field: 4, LengthDelimited
                    stream.WriteByte(34);
                    ﻿msField.SetLength(0);
                    VBspViewer.Importing.Dem.Generated.CSVCMsgSendTable.SendpropT.Serialize(msField, i4);
                    // Length delimited byte array
                    uint length4 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length4);
                    stream.Write(msField.GetBuffer(), 0, (int)length4);

                }
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSVCMsgSendTable instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSVCMsgSendTable instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CSVCMsgSendTable instance)
        {
            writer.Write("{");
            writer.Write("\"is_end\":");
            writer.Write(instance.IsEnd ? "true" : "false");
            writer.Write(",");
            writer.Write("\"net_table_name\":");
            if (instance.NetTableName != null)
            {
                writer.Write("\"" + instance.NetTableName + "\"");
            }
            writer.Write(",");
            writer.Write("\"needs_decoder\":");
            writer.Write(instance.NeedsDecoder ? "true" : "false");
            writer.Write(",");
            writer.Write("\"props\":");

            if (instance.Props != null)
            {
                writer.Write("[");
                var first = true;
                foreach (var i4 in instance.Props)
                {
                    if (!first) writer.Write(",");
                    else first = false;
                    ﻿VBspViewer.Importing.Dem.Generated.CSVCMsgSendTable.SendpropT.SerializeJson(writer, i4);

                }
                writer.Write("]");
            }
            else
            {
                writer.Write("null");
            }
            writer.Write("}");
        }

        [System.Serializable()]
        public partial class SendpropT
        {
            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static SendpropT Deserialize(Stream stream)
            {
                SendpropT instance = new SendpropT();
                Deserialize(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static SendpropT DeserializeLengthDelimited(Stream stream)
            {
                SendpropT instance = new SendpropT();
                DeserializeLengthDelimited(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static SendpropT DeserializeLength(Stream stream, int length)
            {
                SendpropT instance = new SendpropT();
                DeserializeLength(stream, length, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
            public static SendpropT Deserialize(byte[] buffer)
            {
                SendpropT instance = new SendpropT();
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Load this value from a proto buffer</summary>
            public void FromProto(Stream stream)
            {
                Deserialize(stream, this );
            }

            /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
            public static VBspViewer.Importing.Dem.Generated.CSVCMsgSendTable.SendpropT Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CSVCMsgSendTable.SendpropT instance)
            {
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
            public static VBspViewer.Importing.Dem.Generated.CSVCMsgSendTable.SendpropT Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgSendTable.SendpropT instance)
            {
                BinaryReader br = new BinaryReader(stream);
                while (true)
                {
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        break;
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.Type = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.VarName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                        // Field 3 Varint
                        case 24:
                            instance.Flags = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 4 Varint
                        case 32:
                            instance.Priority = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 5 LengthDelimited
                        case 42:
                            instance.DtName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                        // Field 6 Varint
                        case 48:
                            instance.NumElements = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 7 Fixed32
                        case 61:
                            instance.LowValue = br.ReadSingle();
                            continue;
                        // Field 8 Fixed32
                        case 69:
                            instance.HighValue = br.ReadSingle();
                            continue;
                        // Field 9 Varint
                        case 72:
                            instance.NumBits = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static VBspViewer.Importing.Dem.Generated.CSVCMsgSendTable.SendpropT DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgSendTable.SendpropT instance)
            {
                BinaryReader br = new BinaryReader(stream);
                long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                limit += stream.Position;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.Type = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.VarName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                        // Field 3 Varint
                        case 24:
                            instance.Flags = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 4 Varint
                        case 32:
                            instance.Priority = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 5 LengthDelimited
                        case 42:
                            instance.DtName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                        // Field 6 Varint
                        case 48:
                            instance.NumElements = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 7 Fixed32
                        case 61:
                            instance.LowValue = br.ReadSingle();
                            continue;
                        // Field 8 Fixed32
                        case 69:
                            instance.HighValue = br.ReadSingle();
                            continue;
                        // Field 9 Varint
                        case 72:
                            instance.NumBits = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static VBspViewer.Importing.Dem.Generated.CSVCMsgSendTable.SendpropT DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CSVCMsgSendTable.SendpropT instance)
            {
                BinaryReader br = new BinaryReader(stream);
                long limit = stream.Position + length;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.Type = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.VarName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                        // Field 3 Varint
                        case 24:
                            instance.Flags = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 4 Varint
                        case 32:
                            instance.Priority = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 5 LengthDelimited
                        case 42:
                            instance.DtName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                        // Field 6 Varint
                        case 48:
                            instance.NumElements = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 7 Fixed32
                        case 61:
                            instance.LowValue = br.ReadSingle();
                            continue;
                        // Field 8 Fixed32
                        case 69:
                            instance.HighValue = br.ReadSingle();
                            continue;
                        // Field 9 Varint
                        case 72:
                            instance.NumBits = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Serialize the instance into the stream</summary>
            public static void Serialize(Stream stream, SendpropT instance)
            {
                BinaryWriter bw = new BinaryWriter(stream);
                var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
                // Key for field: 1, Varint
                stream.WriteByte(8);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Type);
                if (instance.VarName != null)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.VarName));
                }
                // Key for field: 3, Varint
                stream.WriteByte(24);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Flags);
                // Key for field: 4, Varint
                stream.WriteByte(32);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Priority);
                if (instance.DtName != null)
                {
                    // Key for field: 5, LengthDelimited
                    stream.WriteByte(42);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.DtName));
                }
                // Key for field: 6, Varint
                stream.WriteByte(48);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.NumElements);
                // Key for field: 7, Fixed32
                stream.WriteByte(61);
                bw.Write(instance.LowValue);
                // Key for field: 8, Fixed32
                stream.WriteByte(69);
                bw.Write(instance.HighValue);
                // Key for field: 9, Varint
                stream.WriteByte(72);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.NumBits);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
            }

            /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
            public byte[] ToProtoBytes()
            {
                return SerializeToBytes( this );
            }

            /// <summary>Serialize to a Stream</summary>
            public void ToProto( Stream stream )
            {
                Serialize( stream, this );
            }

            /// <summary>Serialize to a JSON string</summary>
            public string ToJson()
            {
                var writer = new global::System.IO.StringWriter();
                SerializeJson(writer, this);
                return writer.ToString();
            }

            /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
            public static byte[] SerializeToBytes(SendpropT instance)
            {
                using (var ms = new MemoryStream())
                {
                    Serialize(ms, instance);
                    return ms.ToArray();
                }
            }
            /// <summary>Helper: Serialize with a varint length prefix</summary>
            public static void SerializeLengthDelimited(Stream stream, SendpropT instance)
            {
                var data = SerializeToBytes(instance);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
                stream.Write(data, 0, data.Length);
            }
            /// <summary>Serialize into a JSON string</summary>
            public static void SerializeJson(TextWriter writer, SendpropT instance)
            {
                writer.Write("{");
                writer.Write("\"type\":");
                writer.Write(instance.Type.ToString());
                writer.Write(",");
                writer.Write("\"var_name\":");
                if (instance.VarName != null)
                {
                    writer.Write("\"" + instance.VarName + "\"");
                }
                writer.Write(",");
                writer.Write("\"flags\":");
                writer.Write(instance.Flags.ToString());
                writer.Write(",");
                writer.Write("\"priority\":");
                writer.Write(instance.Priority.ToString());
                writer.Write(",");
                writer.Write("\"dt_name\":");
                if (instance.DtName != null)
                {
                    writer.Write("\"" + instance.DtName + "\"");
                }
                writer.Write(",");
                writer.Write("\"num_elements\":");
                writer.Write(instance.NumElements.ToString());
                writer.Write(",");
                writer.Write("\"low_value\":");
                writer.Write(instance.LowValue.ToString());
                writer.Write(",");
                writer.Write("\"high_value\":");
                writer.Write(instance.HighValue.ToString());
                writer.Write(",");
                writer.Write("\"num_bits\":");
                writer.Write(instance.NumBits.ToString());
                writer.Write("}");
            }
        }

    }

    [System.Serializable()]
    public partial class CSVCMsgPrint
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgPrint Deserialize(Stream stream)
        {
            CSVCMsgPrint instance = new CSVCMsgPrint();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgPrint DeserializeLengthDelimited(Stream stream)
        {
            CSVCMsgPrint instance = new CSVCMsgPrint();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgPrint DeserializeLength(Stream stream, int length)
        {
            CSVCMsgPrint instance = new CSVCMsgPrint();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSVCMsgPrint Deserialize(byte[] buffer)
        {
            CSVCMsgPrint instance = new CSVCMsgPrint();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgPrint Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CSVCMsgPrint instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgPrint Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgPrint instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Text = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgPrint DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgPrint instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Text = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgPrint DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CSVCMsgPrint instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Text = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSVCMsgPrint instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.Text != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Text));
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSVCMsgPrint instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSVCMsgPrint instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CSVCMsgPrint instance)
        {
            writer.Write("{");
            writer.Write("\"text\":");
            if (instance.Text != null)
            {
                writer.Write("\"" + instance.Text + "\"");
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CSVCMsgSetPause
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgSetPause Deserialize(Stream stream)
        {
            CSVCMsgSetPause instance = new CSVCMsgSetPause();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgSetPause DeserializeLengthDelimited(Stream stream)
        {
            CSVCMsgSetPause instance = new CSVCMsgSetPause();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgSetPause DeserializeLength(Stream stream, int length)
        {
            CSVCMsgSetPause instance = new CSVCMsgSetPause();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSVCMsgSetPause Deserialize(byte[] buffer)
        {
            CSVCMsgSetPause instance = new CSVCMsgSetPause();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgSetPause Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CSVCMsgSetPause instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgSetPause Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgSetPause instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Paused = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgSetPause DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgSetPause instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Paused = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgSetPause DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CSVCMsgSetPause instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Paused = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSVCMsgSetPause instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.Paused);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSVCMsgSetPause instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSVCMsgSetPause instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CSVCMsgSetPause instance)
        {
            writer.Write("{");
            writer.Write("\"paused\":");
            writer.Write(instance.Paused ? "true" : "false");
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CSVCMsgSetView
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgSetView Deserialize(Stream stream)
        {
            CSVCMsgSetView instance = new CSVCMsgSetView();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgSetView DeserializeLengthDelimited(Stream stream)
        {
            CSVCMsgSetView instance = new CSVCMsgSetView();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgSetView DeserializeLength(Stream stream, int length)
        {
            CSVCMsgSetView instance = new CSVCMsgSetView();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSVCMsgSetView Deserialize(byte[] buffer)
        {
            CSVCMsgSetView instance = new CSVCMsgSetView();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgSetView Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CSVCMsgSetView instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgSetView Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgSetView instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.EntityIndex = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgSetView DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgSetView instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.EntityIndex = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgSetView DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CSVCMsgSetView instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.EntityIndex = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSVCMsgSetView instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.EntityIndex);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSVCMsgSetView instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSVCMsgSetView instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CSVCMsgSetView instance)
        {
            writer.Write("{");
            writer.Write("\"entity_index\":");
            writer.Write(instance.EntityIndex.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CSVCMsgCreateStringTable
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgCreateStringTable Deserialize(Stream stream)
        {
            CSVCMsgCreateStringTable instance = new CSVCMsgCreateStringTable();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgCreateStringTable DeserializeLengthDelimited(Stream stream)
        {
            CSVCMsgCreateStringTable instance = new CSVCMsgCreateStringTable();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgCreateStringTable DeserializeLength(Stream stream, int length)
        {
            CSVCMsgCreateStringTable instance = new CSVCMsgCreateStringTable();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSVCMsgCreateStringTable Deserialize(byte[] buffer)
        {
            CSVCMsgCreateStringTable instance = new CSVCMsgCreateStringTable();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgCreateStringTable Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CSVCMsgCreateStringTable instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgCreateStringTable Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgCreateStringTable instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.MaxEntries = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.NumEntries = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.UserDataFixedSize = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.UserDataSize = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.UserDataSizeBits = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 7 Varint
                    case 56:
                        instance.Flags = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 8 LengthDelimited
                    case 66:
                        instance.StringData = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgCreateStringTable DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgCreateStringTable instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.MaxEntries = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.NumEntries = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.UserDataFixedSize = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.UserDataSize = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.UserDataSizeBits = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 7 Varint
                    case 56:
                        instance.Flags = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 8 LengthDelimited
                    case 66:
                        instance.StringData = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgCreateStringTable DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CSVCMsgCreateStringTable instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.MaxEntries = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.NumEntries = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.UserDataFixedSize = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.UserDataSize = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.UserDataSizeBits = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 7 Varint
                    case 56:
                        instance.Flags = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 8 LengthDelimited
                    case 66:
                        instance.StringData = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSVCMsgCreateStringTable instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.Name != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Name));
            }
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.MaxEntries);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.NumEntries);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.UserDataFixedSize);
            // Key for field: 5, Varint
            stream.WriteByte(40);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.UserDataSize);
            // Key for field: 6, Varint
            stream.WriteByte(48);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.UserDataSizeBits);
            // Key for field: 7, Varint
            stream.WriteByte(56);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Flags);
            if (instance.StringData != null)
            {
                // Key for field: 8, LengthDelimited
                stream.WriteByte(66);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.StringData);
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSVCMsgCreateStringTable instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSVCMsgCreateStringTable instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CSVCMsgCreateStringTable instance)
        {
            writer.Write("{");
            writer.Write("\"name\":");
            if (instance.Name != null)
            {
                writer.Write("\"" + instance.Name + "\"");
            }
            writer.Write(",");
            writer.Write("\"max_entries\":");
            writer.Write(instance.MaxEntries.ToString());
            writer.Write(",");
            writer.Write("\"num_entries\":");
            writer.Write(instance.NumEntries.ToString());
            writer.Write(",");
            writer.Write("\"user_data_fixed_size\":");
            writer.Write(instance.UserDataFixedSize ? "true" : "false");
            writer.Write(",");
            writer.Write("\"user_data_size\":");
            writer.Write(instance.UserDataSize.ToString());
            writer.Write(",");
            writer.Write("\"user_data_size_bits\":");
            writer.Write(instance.UserDataSizeBits.ToString());
            writer.Write(",");
            writer.Write("\"flags\":");
            writer.Write(instance.Flags.ToString());
            writer.Write(",");
            writer.Write("\"string_data\":");
            if (instance.StringData != null)
            {
                writer.Write(instance.StringData == null ? "null" : ("\"" + global::System.Convert.ToBase64String(instance.StringData) + "\""));
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CSVCMsgUpdateStringTable
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgUpdateStringTable Deserialize(Stream stream)
        {
            CSVCMsgUpdateStringTable instance = new CSVCMsgUpdateStringTable();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgUpdateStringTable DeserializeLengthDelimited(Stream stream)
        {
            CSVCMsgUpdateStringTable instance = new CSVCMsgUpdateStringTable();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgUpdateStringTable DeserializeLength(Stream stream, int length)
        {
            CSVCMsgUpdateStringTable instance = new CSVCMsgUpdateStringTable();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSVCMsgUpdateStringTable Deserialize(byte[] buffer)
        {
            CSVCMsgUpdateStringTable instance = new CSVCMsgUpdateStringTable();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgUpdateStringTable Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CSVCMsgUpdateStringTable instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgUpdateStringTable Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgUpdateStringTable instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.TableId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.NumChangedEntries = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.StringData = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgUpdateStringTable DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgUpdateStringTable instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.TableId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.NumChangedEntries = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.StringData = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgUpdateStringTable DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CSVCMsgUpdateStringTable instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.TableId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.NumChangedEntries = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.StringData = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSVCMsgUpdateStringTable instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.TableId);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.NumChangedEntries);
            if (instance.StringData != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.StringData);
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSVCMsgUpdateStringTable instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSVCMsgUpdateStringTable instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CSVCMsgUpdateStringTable instance)
        {
            writer.Write("{");
            writer.Write("\"table_id\":");
            writer.Write(instance.TableId.ToString());
            writer.Write(",");
            writer.Write("\"num_changed_entries\":");
            writer.Write(instance.NumChangedEntries.ToString());
            writer.Write(",");
            writer.Write("\"string_data\":");
            if (instance.StringData != null)
            {
                writer.Write(instance.StringData == null ? "null" : ("\"" + global::System.Convert.ToBase64String(instance.StringData) + "\""));
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CSVCMsgVoiceInit
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgVoiceInit Deserialize(Stream stream)
        {
            CSVCMsgVoiceInit instance = new CSVCMsgVoiceInit();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgVoiceInit DeserializeLengthDelimited(Stream stream)
        {
            CSVCMsgVoiceInit instance = new CSVCMsgVoiceInit();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgVoiceInit DeserializeLength(Stream stream, int length)
        {
            CSVCMsgVoiceInit instance = new CSVCMsgVoiceInit();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSVCMsgVoiceInit Deserialize(byte[] buffer)
        {
            CSVCMsgVoiceInit instance = new CSVCMsgVoiceInit();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgVoiceInit Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CSVCMsgVoiceInit instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgVoiceInit Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgVoiceInit instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Quality = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.Codec = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgVoiceInit DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgVoiceInit instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Quality = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.Codec = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgVoiceInit DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CSVCMsgVoiceInit instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Quality = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.Codec = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSVCMsgVoiceInit instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Quality);
            if (instance.Codec != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Codec));
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSVCMsgVoiceInit instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSVCMsgVoiceInit instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CSVCMsgVoiceInit instance)
        {
            writer.Write("{");
            writer.Write("\"quality\":");
            writer.Write(instance.Quality.ToString());
            writer.Write(",");
            writer.Write("\"codec\":");
            if (instance.Codec != null)
            {
                writer.Write("\"" + instance.Codec + "\"");
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CSVCMsgVoiceData
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgVoiceData Deserialize(Stream stream)
        {
            CSVCMsgVoiceData instance = new CSVCMsgVoiceData();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgVoiceData DeserializeLengthDelimited(Stream stream)
        {
            CSVCMsgVoiceData instance = new CSVCMsgVoiceData();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgVoiceData DeserializeLength(Stream stream, int length)
        {
            CSVCMsgVoiceData instance = new CSVCMsgVoiceData();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSVCMsgVoiceData Deserialize(byte[] buffer)
        {
            CSVCMsgVoiceData instance = new CSVCMsgVoiceData();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgVoiceData Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CSVCMsgVoiceData instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgVoiceData Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgVoiceData instance)
        {
            BinaryReader br = new BinaryReader(stream);
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Client = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Proximity = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 3 Fixed64
                    case 25:
                        instance.Xuid = br.ReadUInt64();
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.AudibleMask = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        instance.VoiceData = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgVoiceData DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgVoiceData instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Client = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Proximity = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 3 Fixed64
                    case 25:
                        instance.Xuid = br.ReadUInt64();
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.AudibleMask = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        instance.VoiceData = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgVoiceData DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CSVCMsgVoiceData instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Client = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Proximity = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 3 Fixed64
                    case 25:
                        instance.Xuid = br.ReadUInt64();
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.AudibleMask = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        instance.VoiceData = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSVCMsgVoiceData instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Client);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.Proximity);
            // Key for field: 3, Fixed64
            stream.WriteByte(25);
            bw.Write(instance.Xuid);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.AudibleMask);
            if (instance.VoiceData != null)
            {
                // Key for field: 5, LengthDelimited
                stream.WriteByte(42);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.VoiceData);
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSVCMsgVoiceData instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSVCMsgVoiceData instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CSVCMsgVoiceData instance)
        {
            writer.Write("{");
            writer.Write("\"client\":");
            writer.Write(instance.Client.ToString());
            writer.Write(",");
            writer.Write("\"proximity\":");
            writer.Write(instance.Proximity ? "true" : "false");
            writer.Write(",");
            writer.Write("\"xuid\":");
            writer.Write(instance.Xuid.ToString());
            writer.Write(",");
            writer.Write("\"audible_mask\":");
            writer.Write(instance.AudibleMask.ToString());
            writer.Write(",");
            writer.Write("\"voice_data\":");
            if (instance.VoiceData != null)
            {
                writer.Write(instance.VoiceData == null ? "null" : ("\"" + global::System.Convert.ToBase64String(instance.VoiceData) + "\""));
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CSVCMsgFixAngle
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgFixAngle Deserialize(Stream stream)
        {
            CSVCMsgFixAngle instance = new CSVCMsgFixAngle();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgFixAngle DeserializeLengthDelimited(Stream stream)
        {
            CSVCMsgFixAngle instance = new CSVCMsgFixAngle();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgFixAngle DeserializeLength(Stream stream, int length)
        {
            CSVCMsgFixAngle instance = new CSVCMsgFixAngle();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSVCMsgFixAngle Deserialize(byte[] buffer)
        {
            CSVCMsgFixAngle instance = new CSVCMsgFixAngle();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgFixAngle Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CSVCMsgFixAngle instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgFixAngle Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgFixAngle instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Relative = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Angle == null)
                            instance.Angle = VBspViewer.Importing.Dem.Generated.CMsgQAngle.DeserializeLengthDelimited(stream);
                        else
                            VBspViewer.Importing.Dem.Generated.CMsgQAngle.DeserializeLengthDelimited(stream, instance.Angle);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgFixAngle DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgFixAngle instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Relative = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Angle == null)
                            instance.Angle = VBspViewer.Importing.Dem.Generated.CMsgQAngle.DeserializeLengthDelimited(stream);
                        else
                            VBspViewer.Importing.Dem.Generated.CMsgQAngle.DeserializeLengthDelimited(stream, instance.Angle);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgFixAngle DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CSVCMsgFixAngle instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Relative = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Angle == null)
                            instance.Angle = VBspViewer.Importing.Dem.Generated.CMsgQAngle.DeserializeLengthDelimited(stream);
                        else
                            VBspViewer.Importing.Dem.Generated.CMsgQAngle.DeserializeLengthDelimited(stream, instance.Angle);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSVCMsgFixAngle instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.Relative);
            if (instance.Angle != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                ﻿msField.SetLength(0);
                VBspViewer.Importing.Dem.Generated.CMsgQAngle.Serialize(msField, instance.Angle);
                // Length delimited byte array
                uint length2 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                stream.Write(msField.GetBuffer(), 0, (int)length2);

            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSVCMsgFixAngle instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSVCMsgFixAngle instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CSVCMsgFixAngle instance)
        {
            writer.Write("{");
            writer.Write("\"relative\":");
            writer.Write(instance.Relative ? "true" : "false");
            writer.Write(",");
            writer.Write("\"angle\":");
            if (instance.Angle != null)
            {
                ﻿VBspViewer.Importing.Dem.Generated.CMsgQAngle.SerializeJson(writer, instance.Angle);

            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CSVCMsgCrosshairAngle
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgCrosshairAngle Deserialize(Stream stream)
        {
            CSVCMsgCrosshairAngle instance = new CSVCMsgCrosshairAngle();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgCrosshairAngle DeserializeLengthDelimited(Stream stream)
        {
            CSVCMsgCrosshairAngle instance = new CSVCMsgCrosshairAngle();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgCrosshairAngle DeserializeLength(Stream stream, int length)
        {
            CSVCMsgCrosshairAngle instance = new CSVCMsgCrosshairAngle();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSVCMsgCrosshairAngle Deserialize(byte[] buffer)
        {
            CSVCMsgCrosshairAngle instance = new CSVCMsgCrosshairAngle();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgCrosshairAngle Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CSVCMsgCrosshairAngle instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgCrosshairAngle Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgCrosshairAngle instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Angle == null)
                            instance.Angle = VBspViewer.Importing.Dem.Generated.CMsgQAngle.DeserializeLengthDelimited(stream);
                        else
                            VBspViewer.Importing.Dem.Generated.CMsgQAngle.DeserializeLengthDelimited(stream, instance.Angle);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgCrosshairAngle DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgCrosshairAngle instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Angle == null)
                            instance.Angle = VBspViewer.Importing.Dem.Generated.CMsgQAngle.DeserializeLengthDelimited(stream);
                        else
                            VBspViewer.Importing.Dem.Generated.CMsgQAngle.DeserializeLengthDelimited(stream, instance.Angle);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgCrosshairAngle DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CSVCMsgCrosshairAngle instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Angle == null)
                            instance.Angle = VBspViewer.Importing.Dem.Generated.CMsgQAngle.DeserializeLengthDelimited(stream);
                        else
                            VBspViewer.Importing.Dem.Generated.CMsgQAngle.DeserializeLengthDelimited(stream, instance.Angle);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSVCMsgCrosshairAngle instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.Angle != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                ﻿msField.SetLength(0);
                VBspViewer.Importing.Dem.Generated.CMsgQAngle.Serialize(msField, instance.Angle);
                // Length delimited byte array
                uint length1 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                stream.Write(msField.GetBuffer(), 0, (int)length1);

            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSVCMsgCrosshairAngle instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSVCMsgCrosshairAngle instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CSVCMsgCrosshairAngle instance)
        {
            writer.Write("{");
            writer.Write("\"angle\":");
            if (instance.Angle != null)
            {
                ﻿VBspViewer.Importing.Dem.Generated.CMsgQAngle.SerializeJson(writer, instance.Angle);

            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CSVCMsgPrefetch
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgPrefetch Deserialize(Stream stream)
        {
            CSVCMsgPrefetch instance = new CSVCMsgPrefetch();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgPrefetch DeserializeLengthDelimited(Stream stream)
        {
            CSVCMsgPrefetch instance = new CSVCMsgPrefetch();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgPrefetch DeserializeLength(Stream stream, int length)
        {
            CSVCMsgPrefetch instance = new CSVCMsgPrefetch();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSVCMsgPrefetch Deserialize(byte[] buffer)
        {
            CSVCMsgPrefetch instance = new CSVCMsgPrefetch();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgPrefetch Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CSVCMsgPrefetch instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgPrefetch Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgPrefetch instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.SoundIndex = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgPrefetch DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgPrefetch instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.SoundIndex = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgPrefetch DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CSVCMsgPrefetch instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.SoundIndex = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSVCMsgPrefetch instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.SoundIndex);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSVCMsgPrefetch instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSVCMsgPrefetch instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CSVCMsgPrefetch instance)
        {
            writer.Write("{");
            writer.Write("\"sound_index\":");
            writer.Write(instance.SoundIndex.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CSVCMsgBSPDecal
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgBSPDecal Deserialize(Stream stream)
        {
            CSVCMsgBSPDecal instance = new CSVCMsgBSPDecal();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgBSPDecal DeserializeLengthDelimited(Stream stream)
        {
            CSVCMsgBSPDecal instance = new CSVCMsgBSPDecal();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgBSPDecal DeserializeLength(Stream stream, int length)
        {
            CSVCMsgBSPDecal instance = new CSVCMsgBSPDecal();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSVCMsgBSPDecal Deserialize(byte[] buffer)
        {
            CSVCMsgBSPDecal instance = new CSVCMsgBSPDecal();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgBSPDecal Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CSVCMsgBSPDecal instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgBSPDecal Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgBSPDecal instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Pos == null)
                            instance.Pos = VBspViewer.Importing.Dem.Generated.CMsgVector.DeserializeLengthDelimited(stream);
                        else
                            VBspViewer.Importing.Dem.Generated.CMsgVector.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.DecalTextureIndex = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.EntityIndex = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.ModelIndex = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.LowPriority = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgBSPDecal DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgBSPDecal instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Pos == null)
                            instance.Pos = VBspViewer.Importing.Dem.Generated.CMsgVector.DeserializeLengthDelimited(stream);
                        else
                            VBspViewer.Importing.Dem.Generated.CMsgVector.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.DecalTextureIndex = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.EntityIndex = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.ModelIndex = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.LowPriority = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgBSPDecal DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CSVCMsgBSPDecal instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Pos == null)
                            instance.Pos = VBspViewer.Importing.Dem.Generated.CMsgVector.DeserializeLengthDelimited(stream);
                        else
                            VBspViewer.Importing.Dem.Generated.CMsgVector.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.DecalTextureIndex = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.EntityIndex = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.ModelIndex = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.LowPriority = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSVCMsgBSPDecal instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.Pos != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                ﻿msField.SetLength(0);
                VBspViewer.Importing.Dem.Generated.CMsgVector.Serialize(msField, instance.Pos);
                // Length delimited byte array
                uint length1 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                stream.Write(msField.GetBuffer(), 0, (int)length1);

            }
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.DecalTextureIndex);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.EntityIndex);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.ModelIndex);
            // Key for field: 5, Varint
            stream.WriteByte(40);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.LowPriority);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSVCMsgBSPDecal instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSVCMsgBSPDecal instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CSVCMsgBSPDecal instance)
        {
            writer.Write("{");
            writer.Write("\"pos\":");
            if (instance.Pos != null)
            {
                ﻿VBspViewer.Importing.Dem.Generated.CMsgVector.SerializeJson(writer, instance.Pos);

            }
            writer.Write(",");
            writer.Write("\"decal_texture_index\":");
            writer.Write(instance.DecalTextureIndex.ToString());
            writer.Write(",");
            writer.Write("\"entity_index\":");
            writer.Write(instance.EntityIndex.ToString());
            writer.Write(",");
            writer.Write("\"model_index\":");
            writer.Write(instance.ModelIndex.ToString());
            writer.Write(",");
            writer.Write("\"low_priority\":");
            writer.Write(instance.LowPriority ? "true" : "false");
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CSVCMsgGetCvarValue
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgGetCvarValue Deserialize(Stream stream)
        {
            CSVCMsgGetCvarValue instance = new CSVCMsgGetCvarValue();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgGetCvarValue DeserializeLengthDelimited(Stream stream)
        {
            CSVCMsgGetCvarValue instance = new CSVCMsgGetCvarValue();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgGetCvarValue DeserializeLength(Stream stream, int length)
        {
            CSVCMsgGetCvarValue instance = new CSVCMsgGetCvarValue();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSVCMsgGetCvarValue Deserialize(byte[] buffer)
        {
            CSVCMsgGetCvarValue instance = new CSVCMsgGetCvarValue();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgGetCvarValue Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CSVCMsgGetCvarValue instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgGetCvarValue Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgGetCvarValue instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Cookie = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.CvarName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgGetCvarValue DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgGetCvarValue instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Cookie = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.CvarName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgGetCvarValue DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CSVCMsgGetCvarValue instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Cookie = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.CvarName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSVCMsgGetCvarValue instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Cookie);
            if (instance.CvarName != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.CvarName));
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSVCMsgGetCvarValue instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSVCMsgGetCvarValue instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CSVCMsgGetCvarValue instance)
        {
            writer.Write("{");
            writer.Write("\"cookie\":");
            writer.Write(instance.Cookie.ToString());
            writer.Write(",");
            writer.Write("\"cvar_name\":");
            if (instance.CvarName != null)
            {
                writer.Write("\"" + instance.CvarName + "\"");
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CSVCMsgMenu
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgMenu Deserialize(Stream stream)
        {
            CSVCMsgMenu instance = new CSVCMsgMenu();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgMenu DeserializeLengthDelimited(Stream stream)
        {
            CSVCMsgMenu instance = new CSVCMsgMenu();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgMenu DeserializeLength(Stream stream, int length)
        {
            CSVCMsgMenu instance = new CSVCMsgMenu();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSVCMsgMenu Deserialize(byte[] buffer)
        {
            CSVCMsgMenu instance = new CSVCMsgMenu();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgMenu Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CSVCMsgMenu instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgMenu Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgMenu instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.DialogType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.MenuKeyValues = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgMenu DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgMenu instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.DialogType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.MenuKeyValues = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgMenu DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CSVCMsgMenu instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.DialogType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.MenuKeyValues = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSVCMsgMenu instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.DialogType);
            if (instance.MenuKeyValues != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.MenuKeyValues);
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSVCMsgMenu instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSVCMsgMenu instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CSVCMsgMenu instance)
        {
            writer.Write("{");
            writer.Write("\"dialog_type\":");
            writer.Write(instance.DialogType.ToString());
            writer.Write(",");
            writer.Write("\"menu_key_values\":");
            if (instance.MenuKeyValues != null)
            {
                writer.Write(instance.MenuKeyValues == null ? "null" : ("\"" + global::System.Convert.ToBase64String(instance.MenuKeyValues) + "\""));
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CSVCMsgUserMessage
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgUserMessage Deserialize(Stream stream)
        {
            CSVCMsgUserMessage instance = new CSVCMsgUserMessage();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgUserMessage DeserializeLengthDelimited(Stream stream)
        {
            CSVCMsgUserMessage instance = new CSVCMsgUserMessage();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgUserMessage DeserializeLength(Stream stream, int length)
        {
            CSVCMsgUserMessage instance = new CSVCMsgUserMessage();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSVCMsgUserMessage Deserialize(byte[] buffer)
        {
            CSVCMsgUserMessage instance = new CSVCMsgUserMessage();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgUserMessage Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CSVCMsgUserMessage instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgUserMessage Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgUserMessage instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.MsgType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.MsgData = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgUserMessage DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgUserMessage instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.MsgType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.MsgData = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgUserMessage DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CSVCMsgUserMessage instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.MsgType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.MsgData = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSVCMsgUserMessage instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.MsgType);
            if (instance.MsgData != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.MsgData);
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSVCMsgUserMessage instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSVCMsgUserMessage instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CSVCMsgUserMessage instance)
        {
            writer.Write("{");
            writer.Write("\"msg_type\":");
            writer.Write(instance.MsgType.ToString());
            writer.Write(",");
            writer.Write("\"msg_data\":");
            if (instance.MsgData != null)
            {
                writer.Write(instance.MsgData == null ? "null" : ("\"" + global::System.Convert.ToBase64String(instance.MsgData) + "\""));
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CSVCMsgGameEvent
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgGameEvent Deserialize(Stream stream)
        {
            CSVCMsgGameEvent instance = new CSVCMsgGameEvent();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgGameEvent DeserializeLengthDelimited(Stream stream)
        {
            CSVCMsgGameEvent instance = new CSVCMsgGameEvent();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgGameEvent DeserializeLength(Stream stream, int length)
        {
            CSVCMsgGameEvent instance = new CSVCMsgGameEvent();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSVCMsgGameEvent Deserialize(byte[] buffer)
        {
            CSVCMsgGameEvent instance = new CSVCMsgGameEvent();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgGameEvent Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CSVCMsgGameEvent instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgGameEvent Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgGameEvent instance)
        {
            if (instance.Keys == null)
                instance.Keys = new List<VBspViewer.Importing.Dem.Generated.CSVCMsgGameEvent.KeyT>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.EventName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Eventid = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        // repeated
                        instance.Keys.Add(VBspViewer.Importing.Dem.Generated.CSVCMsgGameEvent.KeyT.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgGameEvent DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgGameEvent instance)
        {
            if (instance.Keys == null)
                instance.Keys = new List<VBspViewer.Importing.Dem.Generated.CSVCMsgGameEvent.KeyT>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.EventName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Eventid = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        // repeated
                        instance.Keys.Add(VBspViewer.Importing.Dem.Generated.CSVCMsgGameEvent.KeyT.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgGameEvent DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CSVCMsgGameEvent instance)
        {
            if (instance.Keys == null)
                instance.Keys = new List<VBspViewer.Importing.Dem.Generated.CSVCMsgGameEvent.KeyT>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.EventName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Eventid = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        // repeated
                        instance.Keys.Add(VBspViewer.Importing.Dem.Generated.CSVCMsgGameEvent.KeyT.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSVCMsgGameEvent instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.EventName != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.EventName));
            }
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Eventid);
            if (instance.Keys != null)
            {
                foreach (var i3 in instance.Keys)
                {
                    // Key for field: 3, LengthDelimited
                    stream.WriteByte(26);
                    ﻿msField.SetLength(0);
                    VBspViewer.Importing.Dem.Generated.CSVCMsgGameEvent.KeyT.Serialize(msField, i3);
                    // Length delimited byte array
                    uint length3 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length3);
                    stream.Write(msField.GetBuffer(), 0, (int)length3);

                }
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSVCMsgGameEvent instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSVCMsgGameEvent instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CSVCMsgGameEvent instance)
        {
            writer.Write("{");
            writer.Write("\"event_name\":");
            if (instance.EventName != null)
            {
                writer.Write("\"" + instance.EventName + "\"");
            }
            writer.Write(",");
            writer.Write("\"eventid\":");
            writer.Write(instance.Eventid.ToString());
            writer.Write(",");
            writer.Write("\"keys\":");

            if (instance.Keys != null)
            {
                writer.Write("[");
                var first = true;
                foreach (var i3 in instance.Keys)
                {
                    if (!first) writer.Write(",");
                    else first = false;
                    ﻿VBspViewer.Importing.Dem.Generated.CSVCMsgGameEvent.KeyT.SerializeJson(writer, i3);

                }
                writer.Write("]");
            }
            else
            {
                writer.Write("null");
            }
            writer.Write("}");
        }

        [System.Serializable()]
        public partial class KeyT
        {
            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static KeyT Deserialize(Stream stream)
            {
                KeyT instance = new KeyT();
                Deserialize(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static KeyT DeserializeLengthDelimited(Stream stream)
            {
                KeyT instance = new KeyT();
                DeserializeLengthDelimited(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static KeyT DeserializeLength(Stream stream, int length)
            {
                KeyT instance = new KeyT();
                DeserializeLength(stream, length, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
            public static KeyT Deserialize(byte[] buffer)
            {
                KeyT instance = new KeyT();
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Load this value from a proto buffer</summary>
            public void FromProto(Stream stream)
            {
                Deserialize(stream, this );
            }

            /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
            public static VBspViewer.Importing.Dem.Generated.CSVCMsgGameEvent.KeyT Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CSVCMsgGameEvent.KeyT instance)
            {
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
            public static VBspViewer.Importing.Dem.Generated.CSVCMsgGameEvent.KeyT Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgGameEvent.KeyT instance)
            {
                BinaryReader br = new BinaryReader(stream);
                while (true)
                {
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        break;
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.Type = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.ValString = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                        // Field 3 Fixed32
                        case 29:
                            instance.ValFloat = br.ReadSingle();
                            continue;
                        // Field 4 Varint
                        case 32:
                            instance.ValLong = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 5 Varint
                        case 40:
                            instance.ValShort = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 6 Varint
                        case 48:
                            instance.ValByte = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 7 Varint
                        case 56:
                            instance.ValBool = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        // Field 8 Varint
                        case 64:
                            instance.ValUint64 = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 9 LengthDelimited
                        case 74:
                            instance.ValWstring = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static VBspViewer.Importing.Dem.Generated.CSVCMsgGameEvent.KeyT DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgGameEvent.KeyT instance)
            {
                BinaryReader br = new BinaryReader(stream);
                long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                limit += stream.Position;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.Type = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.ValString = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                        // Field 3 Fixed32
                        case 29:
                            instance.ValFloat = br.ReadSingle();
                            continue;
                        // Field 4 Varint
                        case 32:
                            instance.ValLong = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 5 Varint
                        case 40:
                            instance.ValShort = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 6 Varint
                        case 48:
                            instance.ValByte = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 7 Varint
                        case 56:
                            instance.ValBool = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        // Field 8 Varint
                        case 64:
                            instance.ValUint64 = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 9 LengthDelimited
                        case 74:
                            instance.ValWstring = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static VBspViewer.Importing.Dem.Generated.CSVCMsgGameEvent.KeyT DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CSVCMsgGameEvent.KeyT instance)
            {
                BinaryReader br = new BinaryReader(stream);
                long limit = stream.Position + length;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.Type = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.ValString = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                        // Field 3 Fixed32
                        case 29:
                            instance.ValFloat = br.ReadSingle();
                            continue;
                        // Field 4 Varint
                        case 32:
                            instance.ValLong = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 5 Varint
                        case 40:
                            instance.ValShort = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 6 Varint
                        case 48:
                            instance.ValByte = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 7 Varint
                        case 56:
                            instance.ValBool = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        // Field 8 Varint
                        case 64:
                            instance.ValUint64 = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 9 LengthDelimited
                        case 74:
                            instance.ValWstring = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Serialize the instance into the stream</summary>
            public static void Serialize(Stream stream, KeyT instance)
            {
                BinaryWriter bw = new BinaryWriter(stream);
                var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
                // Key for field: 1, Varint
                stream.WriteByte(8);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Type);
                if (instance.ValString != null)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.ValString));
                }
                // Key for field: 3, Fixed32
                stream.WriteByte(29);
                bw.Write(instance.ValFloat);
                // Key for field: 4, Varint
                stream.WriteByte(32);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.ValLong);
                // Key for field: 5, Varint
                stream.WriteByte(40);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.ValShort);
                // Key for field: 6, Varint
                stream.WriteByte(48);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.ValByte);
                // Key for field: 7, Varint
                stream.WriteByte(56);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.ValBool);
                // Key for field: 8, Varint
                stream.WriteByte(64);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream, instance.ValUint64);
                if (instance.ValWstring != null)
                {
                    // Key for field: 9, LengthDelimited
                    stream.WriteByte(74);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.ValWstring);
                }
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
            }

            /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
            public byte[] ToProtoBytes()
            {
                return SerializeToBytes( this );
            }

            /// <summary>Serialize to a Stream</summary>
            public void ToProto( Stream stream )
            {
                Serialize( stream, this );
            }

            /// <summary>Serialize to a JSON string</summary>
            public string ToJson()
            {
                var writer = new global::System.IO.StringWriter();
                SerializeJson(writer, this);
                return writer.ToString();
            }

            /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
            public static byte[] SerializeToBytes(KeyT instance)
            {
                using (var ms = new MemoryStream())
                {
                    Serialize(ms, instance);
                    return ms.ToArray();
                }
            }
            /// <summary>Helper: Serialize with a varint length prefix</summary>
            public static void SerializeLengthDelimited(Stream stream, KeyT instance)
            {
                var data = SerializeToBytes(instance);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
                stream.Write(data, 0, data.Length);
            }
            /// <summary>Serialize into a JSON string</summary>
            public static void SerializeJson(TextWriter writer, KeyT instance)
            {
                writer.Write("{");
                writer.Write("\"type\":");
                writer.Write(instance.Type.ToString());
                writer.Write(",");
                writer.Write("\"val_string\":");
                if (instance.ValString != null)
                {
                    writer.Write("\"" + instance.ValString + "\"");
                }
                writer.Write(",");
                writer.Write("\"val_float\":");
                writer.Write(instance.ValFloat.ToString());
                writer.Write(",");
                writer.Write("\"val_long\":");
                writer.Write(instance.ValLong.ToString());
                writer.Write(",");
                writer.Write("\"val_short\":");
                writer.Write(instance.ValShort.ToString());
                writer.Write(",");
                writer.Write("\"val_byte\":");
                writer.Write(instance.ValByte.ToString());
                writer.Write(",");
                writer.Write("\"val_bool\":");
                writer.Write(instance.ValBool ? "true" : "false");
                writer.Write(",");
                writer.Write("\"val_uint64\":");
                writer.Write(instance.ValUint64.ToString());
                writer.Write(",");
                writer.Write("\"val_wstring\":");
                if (instance.ValWstring != null)
                {
                    writer.Write(instance.ValWstring == null ? "null" : ("\"" + global::System.Convert.ToBase64String(instance.ValWstring) + "\""));
                }
                writer.Write("}");
            }
        }

    }

    [System.Serializable()]
    public partial class CSVCMsgGameEventList
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgGameEventList Deserialize(Stream stream)
        {
            CSVCMsgGameEventList instance = new CSVCMsgGameEventList();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgGameEventList DeserializeLengthDelimited(Stream stream)
        {
            CSVCMsgGameEventList instance = new CSVCMsgGameEventList();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgGameEventList DeserializeLength(Stream stream, int length)
        {
            CSVCMsgGameEventList instance = new CSVCMsgGameEventList();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSVCMsgGameEventList Deserialize(byte[] buffer)
        {
            CSVCMsgGameEventList instance = new CSVCMsgGameEventList();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList instance)
        {
            if (instance.Descriptors == null)
                instance.Descriptors = new List<VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.DescriptorT>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.Descriptors.Add(VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.DescriptorT.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList instance)
        {
            if (instance.Descriptors == null)
                instance.Descriptors = new List<VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.DescriptorT>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.Descriptors.Add(VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.DescriptorT.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList instance)
        {
            if (instance.Descriptors == null)
                instance.Descriptors = new List<VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.DescriptorT>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.Descriptors.Add(VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.DescriptorT.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSVCMsgGameEventList instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.Descriptors != null)
            {
                foreach (var i1 in instance.Descriptors)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    ﻿msField.SetLength(0);
                    VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.DescriptorT.Serialize(msField, i1);
                    // Length delimited byte array
                    uint length1 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                    stream.Write(msField.GetBuffer(), 0, (int)length1);

                }
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSVCMsgGameEventList instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSVCMsgGameEventList instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CSVCMsgGameEventList instance)
        {
            writer.Write("{");
            writer.Write("\"descriptors\":");

            if (instance.Descriptors != null)
            {
                writer.Write("[");
                var first = true;
                foreach (var i1 in instance.Descriptors)
                {
                    if (!first) writer.Write(",");
                    else first = false;
                    ﻿VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.DescriptorT.SerializeJson(writer, i1);

                }
                writer.Write("]");
            }
            else
            {
                writer.Write("null");
            }
            writer.Write("}");
        }

        [System.Serializable()]
        public partial class KeyT
        {
            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static KeyT Deserialize(Stream stream)
            {
                KeyT instance = new KeyT();
                Deserialize(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static KeyT DeserializeLengthDelimited(Stream stream)
            {
                KeyT instance = new KeyT();
                DeserializeLengthDelimited(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static KeyT DeserializeLength(Stream stream, int length)
            {
                KeyT instance = new KeyT();
                DeserializeLength(stream, length, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
            public static KeyT Deserialize(byte[] buffer)
            {
                KeyT instance = new KeyT();
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Load this value from a proto buffer</summary>
            public void FromProto(Stream stream)
            {
                Deserialize(stream, this );
            }

            /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
            public static VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.KeyT Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.KeyT instance)
            {
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
            public static VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.KeyT Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.KeyT instance)
            {
                while (true)
                {
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        break;
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.Type = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.Name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.KeyT DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.KeyT instance)
            {
                long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                limit += stream.Position;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.Type = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.Name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.KeyT DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.KeyT instance)
            {
                long limit = stream.Position + length;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.Type = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.Name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Serialize the instance into the stream</summary>
            public static void Serialize(Stream stream, KeyT instance)
            {
                var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
                // Key for field: 1, Varint
                stream.WriteByte(8);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Type);
                if (instance.Name != null)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Name));
                }
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
            }

            /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
            public byte[] ToProtoBytes()
            {
                return SerializeToBytes( this );
            }

            /// <summary>Serialize to a Stream</summary>
            public void ToProto( Stream stream )
            {
                Serialize( stream, this );
            }

            /// <summary>Serialize to a JSON string</summary>
            public string ToJson()
            {
                var writer = new global::System.IO.StringWriter();
                SerializeJson(writer, this);
                return writer.ToString();
            }

            /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
            public static byte[] SerializeToBytes(KeyT instance)
            {
                using (var ms = new MemoryStream())
                {
                    Serialize(ms, instance);
                    return ms.ToArray();
                }
            }
            /// <summary>Helper: Serialize with a varint length prefix</summary>
            public static void SerializeLengthDelimited(Stream stream, KeyT instance)
            {
                var data = SerializeToBytes(instance);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
                stream.Write(data, 0, data.Length);
            }
            /// <summary>Serialize into a JSON string</summary>
            public static void SerializeJson(TextWriter writer, KeyT instance)
            {
                writer.Write("{");
                writer.Write("\"type\":");
                writer.Write(instance.Type.ToString());
                writer.Write(",");
                writer.Write("\"name\":");
                if (instance.Name != null)
                {
                    writer.Write("\"" + instance.Name + "\"");
                }
                writer.Write("}");
            }
        }


        [System.Serializable()]
        public partial class DescriptorT
        {
            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static DescriptorT Deserialize(Stream stream)
            {
                DescriptorT instance = new DescriptorT();
                Deserialize(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static DescriptorT DeserializeLengthDelimited(Stream stream)
            {
                DescriptorT instance = new DescriptorT();
                DeserializeLengthDelimited(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static DescriptorT DeserializeLength(Stream stream, int length)
            {
                DescriptorT instance = new DescriptorT();
                DeserializeLength(stream, length, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
            public static DescriptorT Deserialize(byte[] buffer)
            {
                DescriptorT instance = new DescriptorT();
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Load this value from a proto buffer</summary>
            public void FromProto(Stream stream)
            {
                Deserialize(stream, this );
            }

            /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
            public static VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.DescriptorT Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.DescriptorT instance)
            {
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
            public static VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.DescriptorT Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.DescriptorT instance)
            {
                if (instance.Keys == null)
                    instance.Keys = new List<VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.KeyT>();
                while (true)
                {
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        break;
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.Eventid = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.Name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                        // Field 3 LengthDelimited
                        case 26:
                            // repeated
                            instance.Keys.Add(VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.KeyT.DeserializeLengthDelimited(stream));
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.DescriptorT DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.DescriptorT instance)
            {
                if (instance.Keys == null)
                    instance.Keys = new List<VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.KeyT>();
                long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                limit += stream.Position;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.Eventid = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.Name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                        // Field 3 LengthDelimited
                        case 26:
                            // repeated
                            instance.Keys.Add(VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.KeyT.DeserializeLengthDelimited(stream));
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.DescriptorT DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.DescriptorT instance)
            {
                if (instance.Keys == null)
                    instance.Keys = new List<VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.KeyT>();
                long limit = stream.Position + length;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.Eventid = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.Name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                        // Field 3 LengthDelimited
                        case 26:
                            // repeated
                            instance.Keys.Add(VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.KeyT.DeserializeLengthDelimited(stream));
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Serialize the instance into the stream</summary>
            public static void Serialize(Stream stream, DescriptorT instance)
            {
                var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
                // Key for field: 1, Varint
                stream.WriteByte(8);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Eventid);
                if (instance.Name != null)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Name));
                }
                if (instance.Keys != null)
                {
                    foreach (var i3 in instance.Keys)
                    {
                        // Key for field: 3, LengthDelimited
                        stream.WriteByte(26);
                        ﻿msField.SetLength(0);
                        VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.KeyT.Serialize(msField, i3);
                        // Length delimited byte array
                        uint length3 = (uint)msField.Length;
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length3);
                        stream.Write(msField.GetBuffer(), 0, (int)length3);

                    }
                }
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
            }

            /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
            public byte[] ToProtoBytes()
            {
                return SerializeToBytes( this );
            }

            /// <summary>Serialize to a Stream</summary>
            public void ToProto( Stream stream )
            {
                Serialize( stream, this );
            }

            /// <summary>Serialize to a JSON string</summary>
            public string ToJson()
            {
                var writer = new global::System.IO.StringWriter();
                SerializeJson(writer, this);
                return writer.ToString();
            }

            /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
            public static byte[] SerializeToBytes(DescriptorT instance)
            {
                using (var ms = new MemoryStream())
                {
                    Serialize(ms, instance);
                    return ms.ToArray();
                }
            }
            /// <summary>Helper: Serialize with a varint length prefix</summary>
            public static void SerializeLengthDelimited(Stream stream, DescriptorT instance)
            {
                var data = SerializeToBytes(instance);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
                stream.Write(data, 0, data.Length);
            }
            /// <summary>Serialize into a JSON string</summary>
            public static void SerializeJson(TextWriter writer, DescriptorT instance)
            {
                writer.Write("{");
                writer.Write("\"eventid\":");
                writer.Write(instance.Eventid.ToString());
                writer.Write(",");
                writer.Write("\"name\":");
                if (instance.Name != null)
                {
                    writer.Write("\"" + instance.Name + "\"");
                }
                writer.Write(",");
                writer.Write("\"keys\":");

                if (instance.Keys != null)
                {
                    writer.Write("[");
                    var first = true;
                    foreach (var i3 in instance.Keys)
                    {
                        if (!first) writer.Write(",");
                        else first = false;
                        ﻿VBspViewer.Importing.Dem.Generated.CSVCMsgGameEventList.KeyT.SerializeJson(writer, i3);

                    }
                    writer.Write("]");
                }
                else
                {
                    writer.Write("null");
                }
                writer.Write("}");
            }
        }

    }

    [System.Serializable()]
    public partial class CSVCMsgTempEntities
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgTempEntities Deserialize(Stream stream)
        {
            CSVCMsgTempEntities instance = new CSVCMsgTempEntities();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgTempEntities DeserializeLengthDelimited(Stream stream)
        {
            CSVCMsgTempEntities instance = new CSVCMsgTempEntities();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgTempEntities DeserializeLength(Stream stream, int length)
        {
            CSVCMsgTempEntities instance = new CSVCMsgTempEntities();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSVCMsgTempEntities Deserialize(byte[] buffer)
        {
            CSVCMsgTempEntities instance = new CSVCMsgTempEntities();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgTempEntities Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CSVCMsgTempEntities instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgTempEntities Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgTempEntities instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Reliable = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.NumEntries = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.EntityData = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgTempEntities DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgTempEntities instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Reliable = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.NumEntries = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.EntityData = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgTempEntities DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CSVCMsgTempEntities instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Reliable = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.NumEntries = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.EntityData = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSVCMsgTempEntities instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.Reliable);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.NumEntries);
            if (instance.EntityData != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.EntityData);
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSVCMsgTempEntities instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSVCMsgTempEntities instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CSVCMsgTempEntities instance)
        {
            writer.Write("{");
            writer.Write("\"reliable\":");
            writer.Write(instance.Reliable ? "true" : "false");
            writer.Write(",");
            writer.Write("\"num_entries\":");
            writer.Write(instance.NumEntries.ToString());
            writer.Write(",");
            writer.Write("\"entity_data\":");
            if (instance.EntityData != null)
            {
                writer.Write(instance.EntityData == null ? "null" : ("\"" + global::System.Convert.ToBase64String(instance.EntityData) + "\""));
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CSVCMsgPacketEntities
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgPacketEntities Deserialize(Stream stream)
        {
            CSVCMsgPacketEntities instance = new CSVCMsgPacketEntities();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgPacketEntities DeserializeLengthDelimited(Stream stream)
        {
            CSVCMsgPacketEntities instance = new CSVCMsgPacketEntities();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgPacketEntities DeserializeLength(Stream stream, int length)
        {
            CSVCMsgPacketEntities instance = new CSVCMsgPacketEntities();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSVCMsgPacketEntities Deserialize(byte[] buffer)
        {
            CSVCMsgPacketEntities instance = new CSVCMsgPacketEntities();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgPacketEntities Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CSVCMsgPacketEntities instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgPacketEntities Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgPacketEntities instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.MaxEntries = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.UpdatedEntries = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.IsDelta = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.UpdateBaseline = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.Baseline = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.DeltaFrom = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 7 LengthDelimited
                    case 58:
                        instance.EntityData = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgPacketEntities DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgPacketEntities instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.MaxEntries = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.UpdatedEntries = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.IsDelta = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.UpdateBaseline = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.Baseline = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.DeltaFrom = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 7 LengthDelimited
                    case 58:
                        instance.EntityData = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgPacketEntities DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CSVCMsgPacketEntities instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.MaxEntries = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.UpdatedEntries = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.IsDelta = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.UpdateBaseline = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.Baseline = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.DeltaFrom = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 7 LengthDelimited
                    case 58:
                        instance.EntityData = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSVCMsgPacketEntities instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.MaxEntries);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.UpdatedEntries);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.IsDelta);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.UpdateBaseline);
            // Key for field: 5, Varint
            stream.WriteByte(40);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Baseline);
            // Key for field: 6, Varint
            stream.WriteByte(48);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.DeltaFrom);
            if (instance.EntityData != null)
            {
                // Key for field: 7, LengthDelimited
                stream.WriteByte(58);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.EntityData);
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSVCMsgPacketEntities instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSVCMsgPacketEntities instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CSVCMsgPacketEntities instance)
        {
            writer.Write("{");
            writer.Write("\"max_entries\":");
            writer.Write(instance.MaxEntries.ToString());
            writer.Write(",");
            writer.Write("\"updated_entries\":");
            writer.Write(instance.UpdatedEntries.ToString());
            writer.Write(",");
            writer.Write("\"is_delta\":");
            writer.Write(instance.IsDelta ? "true" : "false");
            writer.Write(",");
            writer.Write("\"update_baseline\":");
            writer.Write(instance.UpdateBaseline ? "true" : "false");
            writer.Write(",");
            writer.Write("\"baseline\":");
            writer.Write(instance.Baseline.ToString());
            writer.Write(",");
            writer.Write("\"delta_from\":");
            writer.Write(instance.DeltaFrom.ToString());
            writer.Write(",");
            writer.Write("\"entity_data\":");
            if (instance.EntityData != null)
            {
                writer.Write(instance.EntityData == null ? "null" : ("\"" + global::System.Convert.ToBase64String(instance.EntityData) + "\""));
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CSVCMsgSounds
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgSounds Deserialize(Stream stream)
        {
            CSVCMsgSounds instance = new CSVCMsgSounds();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgSounds DeserializeLengthDelimited(Stream stream)
        {
            CSVCMsgSounds instance = new CSVCMsgSounds();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSVCMsgSounds DeserializeLength(Stream stream, int length)
        {
            CSVCMsgSounds instance = new CSVCMsgSounds();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSVCMsgSounds Deserialize(byte[] buffer)
        {
            CSVCMsgSounds instance = new CSVCMsgSounds();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgSounds Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CSVCMsgSounds instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgSounds Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgSounds instance)
        {
            if (instance.Sounds == null)
                instance.Sounds = new List<VBspViewer.Importing.Dem.Generated.CSVCMsgSounds.SounddataT>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.ReliableSound = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        instance.Sounds.Add(VBspViewer.Importing.Dem.Generated.CSVCMsgSounds.SounddataT.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgSounds DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgSounds instance)
        {
            if (instance.Sounds == null)
                instance.Sounds = new List<VBspViewer.Importing.Dem.Generated.CSVCMsgSounds.SounddataT>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.ReliableSound = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        instance.Sounds.Add(VBspViewer.Importing.Dem.Generated.CSVCMsgSounds.SounddataT.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CSVCMsgSounds DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CSVCMsgSounds instance)
        {
            if (instance.Sounds == null)
                instance.Sounds = new List<VBspViewer.Importing.Dem.Generated.CSVCMsgSounds.SounddataT>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.ReliableSound = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        instance.Sounds.Add(VBspViewer.Importing.Dem.Generated.CSVCMsgSounds.SounddataT.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSVCMsgSounds instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.ReliableSound);
            if (instance.Sounds != null)
            {
                foreach (var i2 in instance.Sounds)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    ﻿msField.SetLength(0);
                    VBspViewer.Importing.Dem.Generated.CSVCMsgSounds.SounddataT.Serialize(msField, i2);
                    // Length delimited byte array
                    uint length2 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                    stream.Write(msField.GetBuffer(), 0, (int)length2);

                }
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSVCMsgSounds instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSVCMsgSounds instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CSVCMsgSounds instance)
        {
            writer.Write("{");
            writer.Write("\"reliable_sound\":");
            writer.Write(instance.ReliableSound ? "true" : "false");
            writer.Write(",");
            writer.Write("\"sounds\":");

            if (instance.Sounds != null)
            {
                writer.Write("[");
                var first = true;
                foreach (var i2 in instance.Sounds)
                {
                    if (!first) writer.Write(",");
                    else first = false;
                    ﻿VBspViewer.Importing.Dem.Generated.CSVCMsgSounds.SounddataT.SerializeJson(writer, i2);

                }
                writer.Write("]");
            }
            else
            {
                writer.Write("null");
            }
            writer.Write("}");
        }

        [System.Serializable()]
        public partial class SounddataT
        {
            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static SounddataT Deserialize(Stream stream)
            {
                SounddataT instance = new SounddataT();
                Deserialize(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static SounddataT DeserializeLengthDelimited(Stream stream)
            {
                SounddataT instance = new SounddataT();
                DeserializeLengthDelimited(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static SounddataT DeserializeLength(Stream stream, int length)
            {
                SounddataT instance = new SounddataT();
                DeserializeLength(stream, length, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
            public static SounddataT Deserialize(byte[] buffer)
            {
                SounddataT instance = new SounddataT();
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Load this value from a proto buffer</summary>
            public void FromProto(Stream stream)
            {
                Deserialize(stream, this );
            }

            /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
            public static VBspViewer.Importing.Dem.Generated.CSVCMsgSounds.SounddataT Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CSVCMsgSounds.SounddataT instance)
            {
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
            public static VBspViewer.Importing.Dem.Generated.CSVCMsgSounds.SounddataT Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgSounds.SounddataT instance)
            {
                BinaryReader br = new BinaryReader(stream);
                while (true)
                {
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        break;
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.OriginX = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadZInt32(stream);
                            continue;
                        // Field 2 Varint
                        case 16:
                            instance.OriginY = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadZInt32(stream);
                            continue;
                        // Field 3 Varint
                        case 24:
                            instance.OriginZ = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadZInt32(stream);
                            continue;
                        // Field 4 Varint
                        case 32:
                            instance.Volume = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                            continue;
                        // Field 5 Fixed32
                        case 45:
                            instance.DelayValue = br.ReadSingle();
                            continue;
                        // Field 6 Varint
                        case 48:
                            instance.SequenceNumber = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 7 Varint
                        case 56:
                            instance.EntityIndex = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 8 Varint
                        case 64:
                            instance.Channel = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 9 Varint
                        case 72:
                            instance.Pitch = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 10 Varint
                        case 80:
                            instance.Flags = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 11 Varint
                        case 88:
                            instance.SoundNum = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                            continue;
                        // Field 12 Fixed32
                        case 101:
                            instance.SoundNumHandle = br.ReadUInt32();
                            continue;
                        // Field 13 Varint
                        case 104:
                            instance.SpeakerEntity = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 14 Varint
                        case 112:
                            instance.RandomSeed = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 15 Varint
                        case 120:
                            instance.SoundLevel = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        case 16:
                            if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                                break;
                            instance.IsSentence = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        case 17:
                            if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                                break;
                            instance.IsAmbient = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static VBspViewer.Importing.Dem.Generated.CSVCMsgSounds.SounddataT DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CSVCMsgSounds.SounddataT instance)
            {
                BinaryReader br = new BinaryReader(stream);
                long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                limit += stream.Position;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.OriginX = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadZInt32(stream);
                            continue;
                        // Field 2 Varint
                        case 16:
                            instance.OriginY = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadZInt32(stream);
                            continue;
                        // Field 3 Varint
                        case 24:
                            instance.OriginZ = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadZInt32(stream);
                            continue;
                        // Field 4 Varint
                        case 32:
                            instance.Volume = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                            continue;
                        // Field 5 Fixed32
                        case 45:
                            instance.DelayValue = br.ReadSingle();
                            continue;
                        // Field 6 Varint
                        case 48:
                            instance.SequenceNumber = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 7 Varint
                        case 56:
                            instance.EntityIndex = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 8 Varint
                        case 64:
                            instance.Channel = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 9 Varint
                        case 72:
                            instance.Pitch = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 10 Varint
                        case 80:
                            instance.Flags = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 11 Varint
                        case 88:
                            instance.SoundNum = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                            continue;
                        // Field 12 Fixed32
                        case 101:
                            instance.SoundNumHandle = br.ReadUInt32();
                            continue;
                        // Field 13 Varint
                        case 104:
                            instance.SpeakerEntity = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 14 Varint
                        case 112:
                            instance.RandomSeed = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 15 Varint
                        case 120:
                            instance.SoundLevel = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        case 16:
                            if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                                break;
                            instance.IsSentence = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        case 17:
                            if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                                break;
                            instance.IsAmbient = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static VBspViewer.Importing.Dem.Generated.CSVCMsgSounds.SounddataT DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CSVCMsgSounds.SounddataT instance)
            {
                BinaryReader br = new BinaryReader(stream);
                long limit = stream.Position + length;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.OriginX = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadZInt32(stream);
                            continue;
                        // Field 2 Varint
                        case 16:
                            instance.OriginY = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadZInt32(stream);
                            continue;
                        // Field 3 Varint
                        case 24:
                            instance.OriginZ = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadZInt32(stream);
                            continue;
                        // Field 4 Varint
                        case 32:
                            instance.Volume = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                            continue;
                        // Field 5 Fixed32
                        case 45:
                            instance.DelayValue = br.ReadSingle();
                            continue;
                        // Field 6 Varint
                        case 48:
                            instance.SequenceNumber = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 7 Varint
                        case 56:
                            instance.EntityIndex = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 8 Varint
                        case 64:
                            instance.Channel = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 9 Varint
                        case 72:
                            instance.Pitch = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 10 Varint
                        case 80:
                            instance.Flags = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 11 Varint
                        case 88:
                            instance.SoundNum = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                            continue;
                        // Field 12 Fixed32
                        case 101:
                            instance.SoundNumHandle = br.ReadUInt32();
                            continue;
                        // Field 13 Varint
                        case 104:
                            instance.SpeakerEntity = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 14 Varint
                        case 112:
                            instance.RandomSeed = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 15 Varint
                        case 120:
                            instance.SoundLevel = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        case 16:
                            if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                                break;
                            instance.IsSentence = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        case 17:
                            if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.Varint)
                                break;
                            instance.IsAmbient = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Serialize the instance into the stream</summary>
            public static void Serialize(Stream stream, SounddataT instance)
            {
                BinaryWriter bw = new BinaryWriter(stream);
                var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
                // Key for field: 1, Varint
                stream.WriteByte(8);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteZInt32(stream, instance.OriginX);
                // Key for field: 2, Varint
                stream.WriteByte(16);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteZInt32(stream, instance.OriginY);
                // Key for field: 3, Varint
                stream.WriteByte(24);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteZInt32(stream, instance.OriginZ);
                // Key for field: 4, Varint
                stream.WriteByte(32);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream,(uint)instance.Volume);
                // Key for field: 5, Fixed32
                stream.WriteByte(45);
                bw.Write(instance.DelayValue);
                // Key for field: 6, Varint
                stream.WriteByte(48);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.SequenceNumber);
                // Key for field: 7, Varint
                stream.WriteByte(56);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.EntityIndex);
                // Key for field: 8, Varint
                stream.WriteByte(64);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Channel);
                // Key for field: 9, Varint
                stream.WriteByte(72);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Pitch);
                // Key for field: 10, Varint
                stream.WriteByte(80);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Flags);
                // Key for field: 11, Varint
                stream.WriteByte(88);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream,(uint)instance.SoundNum);
                // Key for field: 12, Fixed32
                stream.WriteByte(101);
                bw.Write(instance.SoundNumHandle);
                // Key for field: 13, Varint
                stream.WriteByte(104);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.SpeakerEntity);
                // Key for field: 14, Varint
                stream.WriteByte(112);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.RandomSeed);
                // Key for field: 15, Varint
                stream.WriteByte(120);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.SoundLevel);
                // Key for field: 16, Varint
                stream.WriteByte(128);
                stream.WriteByte(1);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.IsSentence);
                // Key for field: 17, Varint
                stream.WriteByte(136);
                stream.WriteByte(1);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.IsAmbient);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
            }

            /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
            public byte[] ToProtoBytes()
            {
                return SerializeToBytes( this );
            }

            /// <summary>Serialize to a Stream</summary>
            public void ToProto( Stream stream )
            {
                Serialize( stream, this );
            }

            /// <summary>Serialize to a JSON string</summary>
            public string ToJson()
            {
                var writer = new global::System.IO.StringWriter();
                SerializeJson(writer, this);
                return writer.ToString();
            }

            /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
            public static byte[] SerializeToBytes(SounddataT instance)
            {
                using (var ms = new MemoryStream())
                {
                    Serialize(ms, instance);
                    return ms.ToArray();
                }
            }
            /// <summary>Helper: Serialize with a varint length prefix</summary>
            public static void SerializeLengthDelimited(Stream stream, SounddataT instance)
            {
                var data = SerializeToBytes(instance);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
                stream.Write(data, 0, data.Length);
            }
            /// <summary>Serialize into a JSON string</summary>
            public static void SerializeJson(TextWriter writer, SounddataT instance)
            {
                writer.Write("{");
                writer.Write("\"origin_x\":");
                writer.Write(instance.OriginX.ToString());
                writer.Write(",");
                writer.Write("\"origin_y\":");
                writer.Write(instance.OriginY.ToString());
                writer.Write(",");
                writer.Write("\"origin_z\":");
                writer.Write(instance.OriginZ.ToString());
                writer.Write(",");
                writer.Write("\"volume\":");
                writer.Write(instance.Volume.ToString());
                writer.Write(",");
                writer.Write("\"delay_value\":");
                writer.Write(instance.DelayValue.ToString());
                writer.Write(",");
                writer.Write("\"sequence_number\":");
                writer.Write(instance.SequenceNumber.ToString());
                writer.Write(",");
                writer.Write("\"entity_index\":");
                writer.Write(instance.EntityIndex.ToString());
                writer.Write(",");
                writer.Write("\"channel\":");
                writer.Write(instance.Channel.ToString());
                writer.Write(",");
                writer.Write("\"pitch\":");
                writer.Write(instance.Pitch.ToString());
                writer.Write(",");
                writer.Write("\"flags\":");
                writer.Write(instance.Flags.ToString());
                writer.Write(",");
                writer.Write("\"sound_num\":");
                writer.Write(instance.SoundNum.ToString());
                writer.Write(",");
                writer.Write("\"sound_num_handle\":");
                writer.Write(instance.SoundNumHandle.ToString());
                writer.Write(",");
                writer.Write("\"speaker_entity\":");
                writer.Write(instance.SpeakerEntity.ToString());
                writer.Write(",");
                writer.Write("\"random_seed\":");
                writer.Write(instance.RandomSeed.ToString());
                writer.Write(",");
                writer.Write("\"sound_level\":");
                writer.Write(instance.SoundLevel.ToString());
                writer.Write(",");
                writer.Write("\"is_sentence\":");
                writer.Write(instance.IsSentence ? "true" : "false");
                writer.Write(",");
                writer.Write("\"is_ambient\":");
                writer.Write(instance.IsAmbient ? "true" : "false");
                writer.Write("}");
            }
        }

    }

    [System.Serializable()]
    public partial class CCSUsrMsgVGUIMenu
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgVGUIMenu Deserialize(Stream stream)
        {
            CCSUsrMsgVGUIMenu instance = new CCSUsrMsgVGUIMenu();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgVGUIMenu DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgVGUIMenu instance = new CCSUsrMsgVGUIMenu();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgVGUIMenu DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgVGUIMenu instance = new CCSUsrMsgVGUIMenu();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgVGUIMenu Deserialize(byte[] buffer)
        {
            CCSUsrMsgVGUIMenu instance = new CCSUsrMsgVGUIMenu();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVGUIMenu Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVGUIMenu instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVGUIMenu Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVGUIMenu instance)
        {
            if (instance.Subkeys == null)
                instance.Subkeys = new List<VBspViewer.Importing.Dem.Generated.CCSUsrMsgVGUIMenu.Subkey>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Show = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        // repeated
                        instance.Subkeys.Add(VBspViewer.Importing.Dem.Generated.CCSUsrMsgVGUIMenu.Subkey.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVGUIMenu DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVGUIMenu instance)
        {
            if (instance.Subkeys == null)
                instance.Subkeys = new List<VBspViewer.Importing.Dem.Generated.CCSUsrMsgVGUIMenu.Subkey>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Show = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        // repeated
                        instance.Subkeys.Add(VBspViewer.Importing.Dem.Generated.CCSUsrMsgVGUIMenu.Subkey.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVGUIMenu DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVGUIMenu instance)
        {
            if (instance.Subkeys == null)
                instance.Subkeys = new List<VBspViewer.Importing.Dem.Generated.CCSUsrMsgVGUIMenu.Subkey>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Show = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        // repeated
                        instance.Subkeys.Add(VBspViewer.Importing.Dem.Generated.CCSUsrMsgVGUIMenu.Subkey.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgVGUIMenu instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.Name != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Name));
            }
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.Show);
            if (instance.Subkeys != null)
            {
                foreach (var i3 in instance.Subkeys)
                {
                    // Key for field: 3, LengthDelimited
                    stream.WriteByte(26);
                    ﻿msField.SetLength(0);
                    VBspViewer.Importing.Dem.Generated.CCSUsrMsgVGUIMenu.Subkey.Serialize(msField, i3);
                    // Length delimited byte array
                    uint length3 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length3);
                    stream.Write(msField.GetBuffer(), 0, (int)length3);

                }
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgVGUIMenu instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgVGUIMenu instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgVGUIMenu instance)
        {
            writer.Write("{");
            writer.Write("\"name\":");
            if (instance.Name != null)
            {
                writer.Write("\"" + instance.Name + "\"");
            }
            writer.Write(",");
            writer.Write("\"show\":");
            writer.Write(instance.Show ? "true" : "false");
            writer.Write(",");
            writer.Write("\"subkeys\":");

            if (instance.Subkeys != null)
            {
                writer.Write("[");
                var first = true;
                foreach (var i3 in instance.Subkeys)
                {
                    if (!first) writer.Write(",");
                    else first = false;
                    ﻿VBspViewer.Importing.Dem.Generated.CCSUsrMsgVGUIMenu.Subkey.SerializeJson(writer, i3);

                }
                writer.Write("]");
            }
            else
            {
                writer.Write("null");
            }
            writer.Write("}");
        }

        [System.Serializable()]
        public partial class Subkey
        {
            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static Subkey Deserialize(Stream stream)
            {
                Subkey instance = new Subkey();
                Deserialize(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static Subkey DeserializeLengthDelimited(Stream stream)
            {
                Subkey instance = new Subkey();
                DeserializeLengthDelimited(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static Subkey DeserializeLength(Stream stream, int length)
            {
                Subkey instance = new Subkey();
                DeserializeLength(stream, length, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
            public static Subkey Deserialize(byte[] buffer)
            {
                Subkey instance = new Subkey();
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Load this value from a proto buffer</summary>
            public void FromProto(Stream stream)
            {
                Deserialize(stream, this );
            }

            /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
            public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVGUIMenu.Subkey Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVGUIMenu.Subkey instance)
            {
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
            public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVGUIMenu.Subkey Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVGUIMenu.Subkey instance)
            {
                while (true)
                {
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        break;
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 LengthDelimited
                        case 10:
                            instance.Name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.Str = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVGUIMenu.Subkey DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVGUIMenu.Subkey instance)
            {
                long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                limit += stream.Position;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 LengthDelimited
                        case 10:
                            instance.Name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.Str = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVGUIMenu.Subkey DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVGUIMenu.Subkey instance)
            {
                long limit = stream.Position + length;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 LengthDelimited
                        case 10:
                            instance.Name = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.Str = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Serialize the instance into the stream</summary>
            public static void Serialize(Stream stream, Subkey instance)
            {
                var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
                if (instance.Name != null)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Name));
                }
                if (instance.Str != null)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Str));
                }
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
            }

            /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
            public byte[] ToProtoBytes()
            {
                return SerializeToBytes( this );
            }

            /// <summary>Serialize to a Stream</summary>
            public void ToProto( Stream stream )
            {
                Serialize( stream, this );
            }

            /// <summary>Serialize to a JSON string</summary>
            public string ToJson()
            {
                var writer = new global::System.IO.StringWriter();
                SerializeJson(writer, this);
                return writer.ToString();
            }

            /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
            public static byte[] SerializeToBytes(Subkey instance)
            {
                using (var ms = new MemoryStream())
                {
                    Serialize(ms, instance);
                    return ms.ToArray();
                }
            }
            /// <summary>Helper: Serialize with a varint length prefix</summary>
            public static void SerializeLengthDelimited(Stream stream, Subkey instance)
            {
                var data = SerializeToBytes(instance);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
                stream.Write(data, 0, data.Length);
            }
            /// <summary>Serialize into a JSON string</summary>
            public static void SerializeJson(TextWriter writer, Subkey instance)
            {
                writer.Write("{");
                writer.Write("\"name\":");
                if (instance.Name != null)
                {
                    writer.Write("\"" + instance.Name + "\"");
                }
                writer.Write(",");
                writer.Write("\"str\":");
                if (instance.Str != null)
                {
                    writer.Write("\"" + instance.Str + "\"");
                }
                writer.Write("}");
            }
        }

    }

    [System.Serializable()]
    public partial class CCSUsrMsgGeiger
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgGeiger Deserialize(Stream stream)
        {
            CCSUsrMsgGeiger instance = new CCSUsrMsgGeiger();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgGeiger DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgGeiger instance = new CCSUsrMsgGeiger();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgGeiger DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgGeiger instance = new CCSUsrMsgGeiger();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgGeiger Deserialize(byte[] buffer)
        {
            CCSUsrMsgGeiger instance = new CCSUsrMsgGeiger();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgGeiger Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgGeiger instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgGeiger Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgGeiger instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Range = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgGeiger DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgGeiger instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Range = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgGeiger DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgGeiger instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Range = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgGeiger instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Range);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgGeiger instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgGeiger instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgGeiger instance)
        {
            writer.Write("{");
            writer.Write("\"range\":");
            writer.Write(instance.Range.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgTrain
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgTrain Deserialize(Stream stream)
        {
            CCSUsrMsgTrain instance = new CCSUsrMsgTrain();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgTrain DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgTrain instance = new CCSUsrMsgTrain();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgTrain DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgTrain instance = new CCSUsrMsgTrain();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgTrain Deserialize(byte[] buffer)
        {
            CCSUsrMsgTrain instance = new CCSUsrMsgTrain();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgTrain Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgTrain instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgTrain Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgTrain instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Train = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgTrain DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgTrain instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Train = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgTrain DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgTrain instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Train = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgTrain instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Train);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgTrain instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgTrain instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgTrain instance)
        {
            writer.Write("{");
            writer.Write("\"train\":");
            writer.Write(instance.Train.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgHudText
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgHudText Deserialize(Stream stream)
        {
            CCSUsrMsgHudText instance = new CCSUsrMsgHudText();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgHudText DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgHudText instance = new CCSUsrMsgHudText();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgHudText DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgHudText instance = new CCSUsrMsgHudText();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgHudText Deserialize(byte[] buffer)
        {
            CCSUsrMsgHudText instance = new CCSUsrMsgHudText();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgHudText Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgHudText instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgHudText Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgHudText instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Text = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgHudText DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgHudText instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Text = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgHudText DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgHudText instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Text = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgHudText instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.Text != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Text));
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgHudText instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgHudText instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgHudText instance)
        {
            writer.Write("{");
            writer.Write("\"text\":");
            if (instance.Text != null)
            {
                writer.Write("\"" + instance.Text + "\"");
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgSayText
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgSayText Deserialize(Stream stream)
        {
            CCSUsrMsgSayText instance = new CCSUsrMsgSayText();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgSayText DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgSayText instance = new CCSUsrMsgSayText();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgSayText DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgSayText instance = new CCSUsrMsgSayText();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgSayText Deserialize(byte[] buffer)
        {
            CCSUsrMsgSayText instance = new CCSUsrMsgSayText();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgSayText Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgSayText instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgSayText Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgSayText instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.EntIdx = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.Text = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.Chat = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.Textallchat = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgSayText DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgSayText instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.EntIdx = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.Text = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.Chat = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.Textallchat = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgSayText DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgSayText instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.EntIdx = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.Text = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.Chat = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.Textallchat = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgSayText instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.EntIdx);
            if (instance.Text != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Text));
            }
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.Chat);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.Textallchat);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgSayText instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgSayText instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgSayText instance)
        {
            writer.Write("{");
            writer.Write("\"ent_idx\":");
            writer.Write(instance.EntIdx.ToString());
            writer.Write(",");
            writer.Write("\"text\":");
            if (instance.Text != null)
            {
                writer.Write("\"" + instance.Text + "\"");
            }
            writer.Write(",");
            writer.Write("\"chat\":");
            writer.Write(instance.Chat ? "true" : "false");
            writer.Write(",");
            writer.Write("\"textallchat\":");
            writer.Write(instance.Textallchat ? "true" : "false");
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgSayText2
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgSayText2 Deserialize(Stream stream)
        {
            CCSUsrMsgSayText2 instance = new CCSUsrMsgSayText2();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgSayText2 DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgSayText2 instance = new CCSUsrMsgSayText2();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgSayText2 DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgSayText2 instance = new CCSUsrMsgSayText2();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgSayText2 Deserialize(byte[] buffer)
        {
            CCSUsrMsgSayText2 instance = new CCSUsrMsgSayText2();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgSayText2 Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgSayText2 instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgSayText2 Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgSayText2 instance)
        {
            if (instance.Params == null)
                instance.Params = new List<string>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.EntIdx = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Chat = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.MsgName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        // repeated
                        instance.Params.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.Textallchat = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgSayText2 DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgSayText2 instance)
        {
            if (instance.Params == null)
                instance.Params = new List<string>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.EntIdx = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Chat = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.MsgName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        // repeated
                        instance.Params.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.Textallchat = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgSayText2 DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgSayText2 instance)
        {
            if (instance.Params == null)
                instance.Params = new List<string>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.EntIdx = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Chat = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.MsgName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        // repeated
                        instance.Params.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.Textallchat = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgSayText2 instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.EntIdx);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.Chat);
            if (instance.MsgName != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.MsgName));
            }
            if (instance.Params != null)
            {
                foreach (var i4 in instance.Params)
                {
                    // Key for field: 4, LengthDelimited
                    stream.WriteByte(34);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(i4));
                }
            }
            // Key for field: 5, Varint
            stream.WriteByte(40);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.Textallchat);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgSayText2 instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgSayText2 instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgSayText2 instance)
        {
            writer.Write("{");
            writer.Write("\"ent_idx\":");
            writer.Write(instance.EntIdx.ToString());
            writer.Write(",");
            writer.Write("\"chat\":");
            writer.Write(instance.Chat ? "true" : "false");
            writer.Write(",");
            writer.Write("\"msg_name\":");
            if (instance.MsgName != null)
            {
                writer.Write("\"" + instance.MsgName + "\"");
            }
            writer.Write(",");
            writer.Write("\"params\":");

            if (instance.Params != null)
            {
                writer.Write("[");
                var first = true;
                foreach (var i4 in instance.Params)
                {
                    if (!first) writer.Write(",");
                    else first = false;
                    writer.Write("\"" + i4 + "\"");
                }
                writer.Write("]");
            }
            else
            {
                writer.Write("null");
            }
            writer.Write(",");
            writer.Write("\"textallchat\":");
            writer.Write(instance.Textallchat ? "true" : "false");
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgTextMsg
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgTextMsg Deserialize(Stream stream)
        {
            CCSUsrMsgTextMsg instance = new CCSUsrMsgTextMsg();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgTextMsg DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgTextMsg instance = new CCSUsrMsgTextMsg();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgTextMsg DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgTextMsg instance = new CCSUsrMsgTextMsg();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgTextMsg Deserialize(byte[] buffer)
        {
            CCSUsrMsgTextMsg instance = new CCSUsrMsgTextMsg();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgTextMsg Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgTextMsg instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgTextMsg Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgTextMsg instance)
        {
            if (instance.Params == null)
                instance.Params = new List<string>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.MsgDst = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        // repeated
                        instance.Params.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgTextMsg DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgTextMsg instance)
        {
            if (instance.Params == null)
                instance.Params = new List<string>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.MsgDst = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        // repeated
                        instance.Params.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgTextMsg DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgTextMsg instance)
        {
            if (instance.Params == null)
                instance.Params = new List<string>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.MsgDst = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        // repeated
                        instance.Params.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgTextMsg instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.MsgDst);
            if (instance.Params != null)
            {
                foreach (var i3 in instance.Params)
                {
                    // Key for field: 3, LengthDelimited
                    stream.WriteByte(26);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(i3));
                }
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgTextMsg instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgTextMsg instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgTextMsg instance)
        {
            writer.Write("{");
            writer.Write("\"msg_dst\":");
            writer.Write(instance.MsgDst.ToString());
            writer.Write(",");
            writer.Write("\"params\":");

            if (instance.Params != null)
            {
                writer.Write("[");
                var first = true;
                foreach (var i3 in instance.Params)
                {
                    if (!first) writer.Write(",");
                    else first = false;
                    writer.Write("\"" + i3 + "\"");
                }
                writer.Write("]");
            }
            else
            {
                writer.Write("null");
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgHudMsg
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgHudMsg Deserialize(Stream stream)
        {
            CCSUsrMsgHudMsg instance = new CCSUsrMsgHudMsg();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgHudMsg DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgHudMsg instance = new CCSUsrMsgHudMsg();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgHudMsg DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgHudMsg instance = new CCSUsrMsgHudMsg();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgHudMsg Deserialize(byte[] buffer)
        {
            CCSUsrMsgHudMsg instance = new CCSUsrMsgHudMsg();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgHudMsg Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgHudMsg instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgHudMsg Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgHudMsg instance)
        {
            BinaryReader br = new BinaryReader(stream);
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Channel = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Pos == null)
                            instance.Pos = VBspViewer.Importing.Dem.Generated.CMsgVector2D.DeserializeLengthDelimited(stream);
                        else
                            VBspViewer.Importing.Dem.Generated.CMsgVector2D.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.Clr1 == null)
                            instance.Clr1 = VBspViewer.Importing.Dem.Generated.CMsgRGBA.DeserializeLengthDelimited(stream);
                        else
                            VBspViewer.Importing.Dem.Generated.CMsgRGBA.DeserializeLengthDelimited(stream, instance.Clr1);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        if (instance.Clr2 == null)
                            instance.Clr2 = VBspViewer.Importing.Dem.Generated.CMsgRGBA.DeserializeLengthDelimited(stream);
                        else
                            VBspViewer.Importing.Dem.Generated.CMsgRGBA.DeserializeLengthDelimited(stream, instance.Clr2);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.Effect = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 6 Fixed32
                    case 53:
                        instance.FadeInTime = br.ReadSingle();
                        continue;
                    // Field 7 Fixed32
                    case 61:
                        instance.FadeOutTime = br.ReadSingle();
                        continue;
                    // Field 9 Fixed32
                    case 77:
                        instance.HoldTime = br.ReadSingle();
                        continue;
                    // Field 10 Fixed32
                    case 85:
                        instance.FxTime = br.ReadSingle();
                        continue;
                    // Field 11 LengthDelimited
                    case 90:
                        instance.Text = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgHudMsg DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgHudMsg instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Channel = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Pos == null)
                            instance.Pos = VBspViewer.Importing.Dem.Generated.CMsgVector2D.DeserializeLengthDelimited(stream);
                        else
                            VBspViewer.Importing.Dem.Generated.CMsgVector2D.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.Clr1 == null)
                            instance.Clr1 = VBspViewer.Importing.Dem.Generated.CMsgRGBA.DeserializeLengthDelimited(stream);
                        else
                            VBspViewer.Importing.Dem.Generated.CMsgRGBA.DeserializeLengthDelimited(stream, instance.Clr1);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        if (instance.Clr2 == null)
                            instance.Clr2 = VBspViewer.Importing.Dem.Generated.CMsgRGBA.DeserializeLengthDelimited(stream);
                        else
                            VBspViewer.Importing.Dem.Generated.CMsgRGBA.DeserializeLengthDelimited(stream, instance.Clr2);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.Effect = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 6 Fixed32
                    case 53:
                        instance.FadeInTime = br.ReadSingle();
                        continue;
                    // Field 7 Fixed32
                    case 61:
                        instance.FadeOutTime = br.ReadSingle();
                        continue;
                    // Field 9 Fixed32
                    case 77:
                        instance.HoldTime = br.ReadSingle();
                        continue;
                    // Field 10 Fixed32
                    case 85:
                        instance.FxTime = br.ReadSingle();
                        continue;
                    // Field 11 LengthDelimited
                    case 90:
                        instance.Text = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgHudMsg DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgHudMsg instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Channel = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Pos == null)
                            instance.Pos = VBspViewer.Importing.Dem.Generated.CMsgVector2D.DeserializeLengthDelimited(stream);
                        else
                            VBspViewer.Importing.Dem.Generated.CMsgVector2D.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.Clr1 == null)
                            instance.Clr1 = VBspViewer.Importing.Dem.Generated.CMsgRGBA.DeserializeLengthDelimited(stream);
                        else
                            VBspViewer.Importing.Dem.Generated.CMsgRGBA.DeserializeLengthDelimited(stream, instance.Clr1);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        if (instance.Clr2 == null)
                            instance.Clr2 = VBspViewer.Importing.Dem.Generated.CMsgRGBA.DeserializeLengthDelimited(stream);
                        else
                            VBspViewer.Importing.Dem.Generated.CMsgRGBA.DeserializeLengthDelimited(stream, instance.Clr2);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.Effect = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 6 Fixed32
                    case 53:
                        instance.FadeInTime = br.ReadSingle();
                        continue;
                    // Field 7 Fixed32
                    case 61:
                        instance.FadeOutTime = br.ReadSingle();
                        continue;
                    // Field 9 Fixed32
                    case 77:
                        instance.HoldTime = br.ReadSingle();
                        continue;
                    // Field 10 Fixed32
                    case 85:
                        instance.FxTime = br.ReadSingle();
                        continue;
                    // Field 11 LengthDelimited
                    case 90:
                        instance.Text = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgHudMsg instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Channel);
            if (instance.Pos != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                ﻿msField.SetLength(0);
                VBspViewer.Importing.Dem.Generated.CMsgVector2D.Serialize(msField, instance.Pos);
                // Length delimited byte array
                uint length2 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                stream.Write(msField.GetBuffer(), 0, (int)length2);

            }
            if (instance.Clr1 != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                ﻿msField.SetLength(0);
                VBspViewer.Importing.Dem.Generated.CMsgRGBA.Serialize(msField, instance.Clr1);
                // Length delimited byte array
                uint length3 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length3);
                stream.Write(msField.GetBuffer(), 0, (int)length3);

            }
            if (instance.Clr2 != null)
            {
                // Key for field: 4, LengthDelimited
                stream.WriteByte(34);
                ﻿msField.SetLength(0);
                VBspViewer.Importing.Dem.Generated.CMsgRGBA.Serialize(msField, instance.Clr2);
                // Length delimited byte array
                uint length4 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length4);
                stream.Write(msField.GetBuffer(), 0, (int)length4);

            }
            // Key for field: 5, Varint
            stream.WriteByte(40);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Effect);
            // Key for field: 6, Fixed32
            stream.WriteByte(53);
            bw.Write(instance.FadeInTime);
            // Key for field: 7, Fixed32
            stream.WriteByte(61);
            bw.Write(instance.FadeOutTime);
            // Key for field: 9, Fixed32
            stream.WriteByte(77);
            bw.Write(instance.HoldTime);
            // Key for field: 10, Fixed32
            stream.WriteByte(85);
            bw.Write(instance.FxTime);
            if (instance.Text != null)
            {
                // Key for field: 11, LengthDelimited
                stream.WriteByte(90);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Text));
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgHudMsg instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgHudMsg instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgHudMsg instance)
        {
            writer.Write("{");
            writer.Write("\"channel\":");
            writer.Write(instance.Channel.ToString());
            writer.Write(",");
            writer.Write("\"pos\":");
            if (instance.Pos != null)
            {
                ﻿VBspViewer.Importing.Dem.Generated.CMsgVector2D.SerializeJson(writer, instance.Pos);

            }
            writer.Write(",");
            writer.Write("\"clr1\":");
            if (instance.Clr1 != null)
            {
                ﻿VBspViewer.Importing.Dem.Generated.CMsgRGBA.SerializeJson(writer, instance.Clr1);

            }
            writer.Write(",");
            writer.Write("\"clr2\":");
            if (instance.Clr2 != null)
            {
                ﻿VBspViewer.Importing.Dem.Generated.CMsgRGBA.SerializeJson(writer, instance.Clr2);

            }
            writer.Write(",");
            writer.Write("\"effect\":");
            writer.Write(instance.Effect.ToString());
            writer.Write(",");
            writer.Write("\"fade_in_time\":");
            writer.Write(instance.FadeInTime.ToString());
            writer.Write(",");
            writer.Write("\"fade_out_time\":");
            writer.Write(instance.FadeOutTime.ToString());
            writer.Write(",");
            writer.Write("\"hold_time\":");
            writer.Write(instance.HoldTime.ToString());
            writer.Write(",");
            writer.Write("\"fx_time\":");
            writer.Write(instance.FxTime.ToString());
            writer.Write(",");
            writer.Write("\"text\":");
            if (instance.Text != null)
            {
                writer.Write("\"" + instance.Text + "\"");
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgShake
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgShake Deserialize(Stream stream)
        {
            CCSUsrMsgShake instance = new CCSUsrMsgShake();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgShake DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgShake instance = new CCSUsrMsgShake();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgShake DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgShake instance = new CCSUsrMsgShake();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgShake Deserialize(byte[] buffer)
        {
            CCSUsrMsgShake instance = new CCSUsrMsgShake();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgShake Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgShake instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgShake Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgShake instance)
        {
            BinaryReader br = new BinaryReader(stream);
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Command = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.LocalAmplitude = br.ReadSingle();
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        instance.Frequency = br.ReadSingle();
                        continue;
                    // Field 4 Fixed32
                    case 37:
                        instance.Duration = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgShake DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgShake instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Command = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.LocalAmplitude = br.ReadSingle();
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        instance.Frequency = br.ReadSingle();
                        continue;
                    // Field 4 Fixed32
                    case 37:
                        instance.Duration = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgShake DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgShake instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Command = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.LocalAmplitude = br.ReadSingle();
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        instance.Frequency = br.ReadSingle();
                        continue;
                    // Field 4 Fixed32
                    case 37:
                        instance.Duration = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgShake instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Command);
            // Key for field: 2, Fixed32
            stream.WriteByte(21);
            bw.Write(instance.LocalAmplitude);
            // Key for field: 3, Fixed32
            stream.WriteByte(29);
            bw.Write(instance.Frequency);
            // Key for field: 4, Fixed32
            stream.WriteByte(37);
            bw.Write(instance.Duration);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgShake instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgShake instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgShake instance)
        {
            writer.Write("{");
            writer.Write("\"command\":");
            writer.Write(instance.Command.ToString());
            writer.Write(",");
            writer.Write("\"local_amplitude\":");
            writer.Write(instance.LocalAmplitude.ToString());
            writer.Write(",");
            writer.Write("\"frequency\":");
            writer.Write(instance.Frequency.ToString());
            writer.Write(",");
            writer.Write("\"duration\":");
            writer.Write(instance.Duration.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgFade
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgFade Deserialize(Stream stream)
        {
            CCSUsrMsgFade instance = new CCSUsrMsgFade();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgFade DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgFade instance = new CCSUsrMsgFade();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgFade DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgFade instance = new CCSUsrMsgFade();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgFade Deserialize(byte[] buffer)
        {
            CCSUsrMsgFade instance = new CCSUsrMsgFade();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgFade Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgFade instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgFade Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgFade instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Duration = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.HoldTime = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.Flags = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        if (instance.Clr == null)
                            instance.Clr = VBspViewer.Importing.Dem.Generated.CMsgRGBA.DeserializeLengthDelimited(stream);
                        else
                            VBspViewer.Importing.Dem.Generated.CMsgRGBA.DeserializeLengthDelimited(stream, instance.Clr);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgFade DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgFade instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Duration = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.HoldTime = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.Flags = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        if (instance.Clr == null)
                            instance.Clr = VBspViewer.Importing.Dem.Generated.CMsgRGBA.DeserializeLengthDelimited(stream);
                        else
                            VBspViewer.Importing.Dem.Generated.CMsgRGBA.DeserializeLengthDelimited(stream, instance.Clr);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgFade DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgFade instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Duration = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.HoldTime = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.Flags = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        if (instance.Clr == null)
                            instance.Clr = VBspViewer.Importing.Dem.Generated.CMsgRGBA.DeserializeLengthDelimited(stream);
                        else
                            VBspViewer.Importing.Dem.Generated.CMsgRGBA.DeserializeLengthDelimited(stream, instance.Clr);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgFade instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Duration);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.HoldTime);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Flags);
            if (instance.Clr != null)
            {
                // Key for field: 4, LengthDelimited
                stream.WriteByte(34);
                ﻿msField.SetLength(0);
                VBspViewer.Importing.Dem.Generated.CMsgRGBA.Serialize(msField, instance.Clr);
                // Length delimited byte array
                uint length4 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length4);
                stream.Write(msField.GetBuffer(), 0, (int)length4);

            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgFade instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgFade instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgFade instance)
        {
            writer.Write("{");
            writer.Write("\"duration\":");
            writer.Write(instance.Duration.ToString());
            writer.Write(",");
            writer.Write("\"hold_time\":");
            writer.Write(instance.HoldTime.ToString());
            writer.Write(",");
            writer.Write("\"flags\":");
            writer.Write(instance.Flags.ToString());
            writer.Write(",");
            writer.Write("\"clr\":");
            if (instance.Clr != null)
            {
                ﻿VBspViewer.Importing.Dem.Generated.CMsgRGBA.SerializeJson(writer, instance.Clr);

            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgRumble
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgRumble Deserialize(Stream stream)
        {
            CCSUsrMsgRumble instance = new CCSUsrMsgRumble();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgRumble DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgRumble instance = new CCSUsrMsgRumble();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgRumble DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgRumble instance = new CCSUsrMsgRumble();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgRumble Deserialize(byte[] buffer)
        {
            CCSUsrMsgRumble instance = new CCSUsrMsgRumble();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgRumble Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgRumble instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgRumble Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgRumble instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Index = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Data = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.Flags = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgRumble DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgRumble instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Index = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Data = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.Flags = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgRumble DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgRumble instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Index = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Data = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.Flags = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgRumble instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Index);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Data);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Flags);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgRumble instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgRumble instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgRumble instance)
        {
            writer.Write("{");
            writer.Write("\"index\":");
            writer.Write(instance.Index.ToString());
            writer.Write(",");
            writer.Write("\"data\":");
            writer.Write(instance.Data.ToString());
            writer.Write(",");
            writer.Write("\"flags\":");
            writer.Write(instance.Flags.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgCloseCaption
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgCloseCaption Deserialize(Stream stream)
        {
            CCSUsrMsgCloseCaption instance = new CCSUsrMsgCloseCaption();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgCloseCaption DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgCloseCaption instance = new CCSUsrMsgCloseCaption();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgCloseCaption DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgCloseCaption instance = new CCSUsrMsgCloseCaption();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgCloseCaption Deserialize(byte[] buffer)
        {
            CCSUsrMsgCloseCaption instance = new CCSUsrMsgCloseCaption();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgCloseCaption Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgCloseCaption instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgCloseCaption Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgCloseCaption instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Hash = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Duration = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.FromPlayer = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgCloseCaption DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgCloseCaption instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Hash = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Duration = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.FromPlayer = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgCloseCaption DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgCloseCaption instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Hash = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Duration = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.FromPlayer = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgCloseCaption instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream,(uint)instance.Hash);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Duration);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.FromPlayer);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgCloseCaption instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgCloseCaption instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgCloseCaption instance)
        {
            writer.Write("{");
            writer.Write("\"hash\":");
            writer.Write(instance.Hash.ToString());
            writer.Write(",");
            writer.Write("\"duration\":");
            writer.Write(instance.Duration.ToString());
            writer.Write(",");
            writer.Write("\"from_player\":");
            writer.Write(instance.FromPlayer ? "true" : "false");
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgCloseCaptionDirect
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgCloseCaptionDirect Deserialize(Stream stream)
        {
            CCSUsrMsgCloseCaptionDirect instance = new CCSUsrMsgCloseCaptionDirect();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgCloseCaptionDirect DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgCloseCaptionDirect instance = new CCSUsrMsgCloseCaptionDirect();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgCloseCaptionDirect DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgCloseCaptionDirect instance = new CCSUsrMsgCloseCaptionDirect();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgCloseCaptionDirect Deserialize(byte[] buffer)
        {
            CCSUsrMsgCloseCaptionDirect instance = new CCSUsrMsgCloseCaptionDirect();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgCloseCaptionDirect Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgCloseCaptionDirect instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgCloseCaptionDirect Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgCloseCaptionDirect instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Hash = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Duration = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.FromPlayer = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgCloseCaptionDirect DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgCloseCaptionDirect instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Hash = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Duration = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.FromPlayer = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgCloseCaptionDirect DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgCloseCaptionDirect instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Hash = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Duration = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.FromPlayer = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgCloseCaptionDirect instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream,(uint)instance.Hash);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Duration);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.FromPlayer);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgCloseCaptionDirect instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgCloseCaptionDirect instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgCloseCaptionDirect instance)
        {
            writer.Write("{");
            writer.Write("\"hash\":");
            writer.Write(instance.Hash.ToString());
            writer.Write(",");
            writer.Write("\"duration\":");
            writer.Write(instance.Duration.ToString());
            writer.Write(",");
            writer.Write("\"from_player\":");
            writer.Write(instance.FromPlayer ? "true" : "false");
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgSendAudio
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgSendAudio Deserialize(Stream stream)
        {
            CCSUsrMsgSendAudio instance = new CCSUsrMsgSendAudio();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgSendAudio DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgSendAudio instance = new CCSUsrMsgSendAudio();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgSendAudio DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgSendAudio instance = new CCSUsrMsgSendAudio();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgSendAudio Deserialize(byte[] buffer)
        {
            CCSUsrMsgSendAudio instance = new CCSUsrMsgSendAudio();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgSendAudio Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgSendAudio instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgSendAudio Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgSendAudio instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.RadioSound = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgSendAudio DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgSendAudio instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.RadioSound = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgSendAudio DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgSendAudio instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.RadioSound = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgSendAudio instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.RadioSound != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.RadioSound));
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgSendAudio instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgSendAudio instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgSendAudio instance)
        {
            writer.Write("{");
            writer.Write("\"radio_sound\":");
            if (instance.RadioSound != null)
            {
                writer.Write("\"" + instance.RadioSound + "\"");
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgRawAudio
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgRawAudio Deserialize(Stream stream)
        {
            CCSUsrMsgRawAudio instance = new CCSUsrMsgRawAudio();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgRawAudio DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgRawAudio instance = new CCSUsrMsgRawAudio();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgRawAudio DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgRawAudio instance = new CCSUsrMsgRawAudio();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgRawAudio Deserialize(byte[] buffer)
        {
            CCSUsrMsgRawAudio instance = new CCSUsrMsgRawAudio();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgRawAudio Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgRawAudio instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgRawAudio Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgRawAudio instance)
        {
            BinaryReader br = new BinaryReader(stream);
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Pitch = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Entidx = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        instance.Duration = br.ReadSingle();
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.VoiceFilename = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgRawAudio DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgRawAudio instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Pitch = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Entidx = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        instance.Duration = br.ReadSingle();
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.VoiceFilename = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgRawAudio DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgRawAudio instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Pitch = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Entidx = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        instance.Duration = br.ReadSingle();
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.VoiceFilename = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgRawAudio instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Pitch);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Entidx);
            // Key for field: 3, Fixed32
            stream.WriteByte(29);
            bw.Write(instance.Duration);
            if (instance.VoiceFilename != null)
            {
                // Key for field: 4, LengthDelimited
                stream.WriteByte(34);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.VoiceFilename));
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgRawAudio instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgRawAudio instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgRawAudio instance)
        {
            writer.Write("{");
            writer.Write("\"pitch\":");
            writer.Write(instance.Pitch.ToString());
            writer.Write(",");
            writer.Write("\"entidx\":");
            writer.Write(instance.Entidx.ToString());
            writer.Write(",");
            writer.Write("\"duration\":");
            writer.Write(instance.Duration.ToString());
            writer.Write(",");
            writer.Write("\"voice_filename\":");
            if (instance.VoiceFilename != null)
            {
                writer.Write("\"" + instance.VoiceFilename + "\"");
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgVoiceMask
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgVoiceMask Deserialize(Stream stream)
        {
            CCSUsrMsgVoiceMask instance = new CCSUsrMsgVoiceMask();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgVoiceMask DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgVoiceMask instance = new CCSUsrMsgVoiceMask();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgVoiceMask DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgVoiceMask instance = new CCSUsrMsgVoiceMask();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgVoiceMask Deserialize(byte[] buffer)
        {
            CCSUsrMsgVoiceMask instance = new CCSUsrMsgVoiceMask();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoiceMask Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoiceMask instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoiceMask Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoiceMask instance)
        {
            if (instance.PlayerMasks == null)
                instance.PlayerMasks = new List<VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoiceMask.PlayerMask>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.PlayerMasks.Add(VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoiceMask.PlayerMask.DeserializeLengthDelimited(stream));
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.PlayerModEnable = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoiceMask DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoiceMask instance)
        {
            if (instance.PlayerMasks == null)
                instance.PlayerMasks = new List<VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoiceMask.PlayerMask>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.PlayerMasks.Add(VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoiceMask.PlayerMask.DeserializeLengthDelimited(stream));
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.PlayerModEnable = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoiceMask DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoiceMask instance)
        {
            if (instance.PlayerMasks == null)
                instance.PlayerMasks = new List<VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoiceMask.PlayerMask>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.PlayerMasks.Add(VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoiceMask.PlayerMask.DeserializeLengthDelimited(stream));
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.PlayerModEnable = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgVoiceMask instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.PlayerMasks != null)
            {
                foreach (var i1 in instance.PlayerMasks)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    ﻿msField.SetLength(0);
                    VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoiceMask.PlayerMask.Serialize(msField, i1);
                    // Length delimited byte array
                    uint length1 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                    stream.Write(msField.GetBuffer(), 0, (int)length1);

                }
            }
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.PlayerModEnable);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgVoiceMask instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgVoiceMask instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgVoiceMask instance)
        {
            writer.Write("{");
            writer.Write("\"player_masks\":");

            if (instance.PlayerMasks != null)
            {
                writer.Write("[");
                var first = true;
                foreach (var i1 in instance.PlayerMasks)
                {
                    if (!first) writer.Write(",");
                    else first = false;
                    ﻿VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoiceMask.PlayerMask.SerializeJson(writer, i1);

                }
                writer.Write("]");
            }
            else
            {
                writer.Write("null");
            }
            writer.Write(",");
            writer.Write("\"player_mod_enable\":");
            writer.Write(instance.PlayerModEnable ? "true" : "false");
            writer.Write("}");
        }

        [System.Serializable()]
        public partial class PlayerMask
        {
            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static PlayerMask Deserialize(Stream stream)
            {
                PlayerMask instance = new PlayerMask();
                Deserialize(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static PlayerMask DeserializeLengthDelimited(Stream stream)
            {
                PlayerMask instance = new PlayerMask();
                DeserializeLengthDelimited(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static PlayerMask DeserializeLength(Stream stream, int length)
            {
                PlayerMask instance = new PlayerMask();
                DeserializeLength(stream, length, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
            public static PlayerMask Deserialize(byte[] buffer)
            {
                PlayerMask instance = new PlayerMask();
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Load this value from a proto buffer</summary>
            public void FromProto(Stream stream)
            {
                Deserialize(stream, this );
            }

            /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
            public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoiceMask.PlayerMask Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoiceMask.PlayerMask instance)
            {
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
            public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoiceMask.PlayerMask Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoiceMask.PlayerMask instance)
            {
                while (true)
                {
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        break;
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.GameRulesMask = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 2 Varint
                        case 16:
                            instance.BanMasks = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoiceMask.PlayerMask DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoiceMask.PlayerMask instance)
            {
                long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                limit += stream.Position;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.GameRulesMask = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 2 Varint
                        case 16:
                            instance.BanMasks = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoiceMask.PlayerMask DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoiceMask.PlayerMask instance)
            {
                long limit = stream.Position + length;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.GameRulesMask = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 2 Varint
                        case 16:
                            instance.BanMasks = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Serialize the instance into the stream</summary>
            public static void Serialize(Stream stream, PlayerMask instance)
            {
                var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
                // Key for field: 1, Varint
                stream.WriteByte(8);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.GameRulesMask);
                // Key for field: 2, Varint
                stream.WriteByte(16);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.BanMasks);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
            }

            /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
            public byte[] ToProtoBytes()
            {
                return SerializeToBytes( this );
            }

            /// <summary>Serialize to a Stream</summary>
            public void ToProto( Stream stream )
            {
                Serialize( stream, this );
            }

            /// <summary>Serialize to a JSON string</summary>
            public string ToJson()
            {
                var writer = new global::System.IO.StringWriter();
                SerializeJson(writer, this);
                return writer.ToString();
            }

            /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
            public static byte[] SerializeToBytes(PlayerMask instance)
            {
                using (var ms = new MemoryStream())
                {
                    Serialize(ms, instance);
                    return ms.ToArray();
                }
            }
            /// <summary>Helper: Serialize with a varint length prefix</summary>
            public static void SerializeLengthDelimited(Stream stream, PlayerMask instance)
            {
                var data = SerializeToBytes(instance);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
                stream.Write(data, 0, data.Length);
            }
            /// <summary>Serialize into a JSON string</summary>
            public static void SerializeJson(TextWriter writer, PlayerMask instance)
            {
                writer.Write("{");
                writer.Write("\"game_rules_mask\":");
                writer.Write(instance.GameRulesMask.ToString());
                writer.Write(",");
                writer.Write("\"ban_masks\":");
                writer.Write(instance.BanMasks.ToString());
                writer.Write("}");
            }
        }

    }

    [System.Serializable()]
    public partial class CCSUsrMsgDamage
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgDamage Deserialize(Stream stream)
        {
            CCSUsrMsgDamage instance = new CCSUsrMsgDamage();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgDamage DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgDamage instance = new CCSUsrMsgDamage();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgDamage DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgDamage instance = new CCSUsrMsgDamage();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgDamage Deserialize(byte[] buffer)
        {
            CCSUsrMsgDamage instance = new CCSUsrMsgDamage();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgDamage Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgDamage instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgDamage Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgDamage instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Amount = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.InflictorWorldPos == null)
                            instance.InflictorWorldPos = VBspViewer.Importing.Dem.Generated.CMsgVector.DeserializeLengthDelimited(stream);
                        else
                            VBspViewer.Importing.Dem.Generated.CMsgVector.DeserializeLengthDelimited(stream, instance.InflictorWorldPos);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgDamage DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgDamage instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Amount = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.InflictorWorldPos == null)
                            instance.InflictorWorldPos = VBspViewer.Importing.Dem.Generated.CMsgVector.DeserializeLengthDelimited(stream);
                        else
                            VBspViewer.Importing.Dem.Generated.CMsgVector.DeserializeLengthDelimited(stream, instance.InflictorWorldPos);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgDamage DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgDamage instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Amount = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.InflictorWorldPos == null)
                            instance.InflictorWorldPos = VBspViewer.Importing.Dem.Generated.CMsgVector.DeserializeLengthDelimited(stream);
                        else
                            VBspViewer.Importing.Dem.Generated.CMsgVector.DeserializeLengthDelimited(stream, instance.InflictorWorldPos);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgDamage instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Amount);
            if (instance.InflictorWorldPos != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                ﻿msField.SetLength(0);
                VBspViewer.Importing.Dem.Generated.CMsgVector.Serialize(msField, instance.InflictorWorldPos);
                // Length delimited byte array
                uint length2 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                stream.Write(msField.GetBuffer(), 0, (int)length2);

            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgDamage instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgDamage instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgDamage instance)
        {
            writer.Write("{");
            writer.Write("\"amount\":");
            writer.Write(instance.Amount.ToString());
            writer.Write(",");
            writer.Write("\"inflictor_world_pos\":");
            if (instance.InflictorWorldPos != null)
            {
                ﻿VBspViewer.Importing.Dem.Generated.CMsgVector.SerializeJson(writer, instance.InflictorWorldPos);

            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgRadioText
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgRadioText Deserialize(Stream stream)
        {
            CCSUsrMsgRadioText instance = new CCSUsrMsgRadioText();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgRadioText DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgRadioText instance = new CCSUsrMsgRadioText();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgRadioText DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgRadioText instance = new CCSUsrMsgRadioText();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgRadioText Deserialize(byte[] buffer)
        {
            CCSUsrMsgRadioText instance = new CCSUsrMsgRadioText();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgRadioText Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgRadioText instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgRadioText Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgRadioText instance)
        {
            if (instance.Params == null)
                instance.Params = new List<string>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.MsgDst = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Client = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.MsgName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        // repeated
                        instance.Params.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgRadioText DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgRadioText instance)
        {
            if (instance.Params == null)
                instance.Params = new List<string>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.MsgDst = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Client = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.MsgName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        // repeated
                        instance.Params.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgRadioText DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgRadioText instance)
        {
            if (instance.Params == null)
                instance.Params = new List<string>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.MsgDst = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Client = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.MsgName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        // repeated
                        instance.Params.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgRadioText instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.MsgDst);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Client);
            if (instance.MsgName != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.MsgName));
            }
            if (instance.Params != null)
            {
                foreach (var i4 in instance.Params)
                {
                    // Key for field: 4, LengthDelimited
                    stream.WriteByte(34);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(i4));
                }
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgRadioText instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgRadioText instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgRadioText instance)
        {
            writer.Write("{");
            writer.Write("\"msg_dst\":");
            writer.Write(instance.MsgDst.ToString());
            writer.Write(",");
            writer.Write("\"client\":");
            writer.Write(instance.Client.ToString());
            writer.Write(",");
            writer.Write("\"msg_name\":");
            if (instance.MsgName != null)
            {
                writer.Write("\"" + instance.MsgName + "\"");
            }
            writer.Write(",");
            writer.Write("\"params\":");

            if (instance.Params != null)
            {
                writer.Write("[");
                var first = true;
                foreach (var i4 in instance.Params)
                {
                    if (!first) writer.Write(",");
                    else first = false;
                    writer.Write("\"" + i4 + "\"");
                }
                writer.Write("]");
            }
            else
            {
                writer.Write("null");
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgHintText
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgHintText Deserialize(Stream stream)
        {
            CCSUsrMsgHintText instance = new CCSUsrMsgHintText();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgHintText DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgHintText instance = new CCSUsrMsgHintText();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgHintText DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgHintText instance = new CCSUsrMsgHintText();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgHintText Deserialize(byte[] buffer)
        {
            CCSUsrMsgHintText instance = new CCSUsrMsgHintText();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgHintText Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgHintText instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgHintText Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgHintText instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Text = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgHintText DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgHintText instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Text = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgHintText DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgHintText instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Text = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgHintText instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.Text != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Text));
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgHintText instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgHintText instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgHintText instance)
        {
            writer.Write("{");
            writer.Write("\"text\":");
            if (instance.Text != null)
            {
                writer.Write("\"" + instance.Text + "\"");
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgKeyHintText
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgKeyHintText Deserialize(Stream stream)
        {
            CCSUsrMsgKeyHintText instance = new CCSUsrMsgKeyHintText();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgKeyHintText DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgKeyHintText instance = new CCSUsrMsgKeyHintText();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgKeyHintText DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgKeyHintText instance = new CCSUsrMsgKeyHintText();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgKeyHintText Deserialize(byte[] buffer)
        {
            CCSUsrMsgKeyHintText instance = new CCSUsrMsgKeyHintText();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgKeyHintText Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgKeyHintText instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgKeyHintText Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgKeyHintText instance)
        {
            if (instance.Hints == null)
                instance.Hints = new List<string>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.Hints.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgKeyHintText DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgKeyHintText instance)
        {
            if (instance.Hints == null)
                instance.Hints = new List<string>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.Hints.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgKeyHintText DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgKeyHintText instance)
        {
            if (instance.Hints == null)
                instance.Hints = new List<string>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.Hints.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgKeyHintText instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.Hints != null)
            {
                foreach (var i1 in instance.Hints)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(i1));
                }
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgKeyHintText instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgKeyHintText instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgKeyHintText instance)
        {
            writer.Write("{");
            writer.Write("\"hints\":");

            if (instance.Hints != null)
            {
                writer.Write("[");
                var first = true;
                foreach (var i1 in instance.Hints)
                {
                    if (!first) writer.Write(",");
                    else first = false;
                    writer.Write("\"" + i1 + "\"");
                }
                writer.Write("]");
            }
            else
            {
                writer.Write("null");
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgProcessSpottedEntityUpdate
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgProcessSpottedEntityUpdate Deserialize(Stream stream)
        {
            CCSUsrMsgProcessSpottedEntityUpdate instance = new CCSUsrMsgProcessSpottedEntityUpdate();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgProcessSpottedEntityUpdate DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgProcessSpottedEntityUpdate instance = new CCSUsrMsgProcessSpottedEntityUpdate();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgProcessSpottedEntityUpdate DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgProcessSpottedEntityUpdate instance = new CCSUsrMsgProcessSpottedEntityUpdate();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgProcessSpottedEntityUpdate Deserialize(byte[] buffer)
        {
            CCSUsrMsgProcessSpottedEntityUpdate instance = new CCSUsrMsgProcessSpottedEntityUpdate();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgProcessSpottedEntityUpdate Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgProcessSpottedEntityUpdate instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgProcessSpottedEntityUpdate Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgProcessSpottedEntityUpdate instance)
        {
            if (instance.EntityUpdates == null)
                instance.EntityUpdates = new List<VBspViewer.Importing.Dem.Generated.CCSUsrMsgProcessSpottedEntityUpdate.SpottedEntityUpdate>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.NewUpdate = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        instance.EntityUpdates.Add(VBspViewer.Importing.Dem.Generated.CCSUsrMsgProcessSpottedEntityUpdate.SpottedEntityUpdate.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgProcessSpottedEntityUpdate DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgProcessSpottedEntityUpdate instance)
        {
            if (instance.EntityUpdates == null)
                instance.EntityUpdates = new List<VBspViewer.Importing.Dem.Generated.CCSUsrMsgProcessSpottedEntityUpdate.SpottedEntityUpdate>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.NewUpdate = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        instance.EntityUpdates.Add(VBspViewer.Importing.Dem.Generated.CCSUsrMsgProcessSpottedEntityUpdate.SpottedEntityUpdate.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgProcessSpottedEntityUpdate DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgProcessSpottedEntityUpdate instance)
        {
            if (instance.EntityUpdates == null)
                instance.EntityUpdates = new List<VBspViewer.Importing.Dem.Generated.CCSUsrMsgProcessSpottedEntityUpdate.SpottedEntityUpdate>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.NewUpdate = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        instance.EntityUpdates.Add(VBspViewer.Importing.Dem.Generated.CCSUsrMsgProcessSpottedEntityUpdate.SpottedEntityUpdate.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgProcessSpottedEntityUpdate instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.NewUpdate);
            if (instance.EntityUpdates != null)
            {
                foreach (var i2 in instance.EntityUpdates)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    ﻿msField.SetLength(0);
                    VBspViewer.Importing.Dem.Generated.CCSUsrMsgProcessSpottedEntityUpdate.SpottedEntityUpdate.Serialize(msField, i2);
                    // Length delimited byte array
                    uint length2 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                    stream.Write(msField.GetBuffer(), 0, (int)length2);

                }
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgProcessSpottedEntityUpdate instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgProcessSpottedEntityUpdate instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgProcessSpottedEntityUpdate instance)
        {
            writer.Write("{");
            writer.Write("\"new_update\":");
            writer.Write(instance.NewUpdate ? "true" : "false");
            writer.Write(",");
            writer.Write("\"entity_updates\":");

            if (instance.EntityUpdates != null)
            {
                writer.Write("[");
                var first = true;
                foreach (var i2 in instance.EntityUpdates)
                {
                    if (!first) writer.Write(",");
                    else first = false;
                    ﻿VBspViewer.Importing.Dem.Generated.CCSUsrMsgProcessSpottedEntityUpdate.SpottedEntityUpdate.SerializeJson(writer, i2);

                }
                writer.Write("]");
            }
            else
            {
                writer.Write("null");
            }
            writer.Write("}");
        }

        [System.Serializable()]
        public partial class SpottedEntityUpdate
        {
            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static SpottedEntityUpdate Deserialize(Stream stream)
            {
                SpottedEntityUpdate instance = new SpottedEntityUpdate();
                Deserialize(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static SpottedEntityUpdate DeserializeLengthDelimited(Stream stream)
            {
                SpottedEntityUpdate instance = new SpottedEntityUpdate();
                DeserializeLengthDelimited(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static SpottedEntityUpdate DeserializeLength(Stream stream, int length)
            {
                SpottedEntityUpdate instance = new SpottedEntityUpdate();
                DeserializeLength(stream, length, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
            public static SpottedEntityUpdate Deserialize(byte[] buffer)
            {
                SpottedEntityUpdate instance = new SpottedEntityUpdate();
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Load this value from a proto buffer</summary>
            public void FromProto(Stream stream)
            {
                Deserialize(stream, this );
            }

            /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
            public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgProcessSpottedEntityUpdate.SpottedEntityUpdate Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgProcessSpottedEntityUpdate.SpottedEntityUpdate instance)
            {
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
            public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgProcessSpottedEntityUpdate.SpottedEntityUpdate Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgProcessSpottedEntityUpdate.SpottedEntityUpdate instance)
            {
                while (true)
                {
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        break;
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.EntityIdx = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 2 Varint
                        case 16:
                            instance.ClassId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 3 Varint
                        case 24:
                            instance.OriginX = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 4 Varint
                        case 32:
                            instance.OriginY = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 5 Varint
                        case 40:
                            instance.OriginZ = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 6 Varint
                        case 48:
                            instance.AngleY = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 7 Varint
                        case 56:
                            instance.Defuser = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        // Field 8 Varint
                        case 64:
                            instance.PlayerHasDefuser = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        // Field 9 Varint
                        case 72:
                            instance.PlayerHasC4 = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgProcessSpottedEntityUpdate.SpottedEntityUpdate DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgProcessSpottedEntityUpdate.SpottedEntityUpdate instance)
            {
                long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                limit += stream.Position;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.EntityIdx = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 2 Varint
                        case 16:
                            instance.ClassId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 3 Varint
                        case 24:
                            instance.OriginX = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 4 Varint
                        case 32:
                            instance.OriginY = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 5 Varint
                        case 40:
                            instance.OriginZ = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 6 Varint
                        case 48:
                            instance.AngleY = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 7 Varint
                        case 56:
                            instance.Defuser = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        // Field 8 Varint
                        case 64:
                            instance.PlayerHasDefuser = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        // Field 9 Varint
                        case 72:
                            instance.PlayerHasC4 = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgProcessSpottedEntityUpdate.SpottedEntityUpdate DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgProcessSpottedEntityUpdate.SpottedEntityUpdate instance)
            {
                long limit = stream.Position + length;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.EntityIdx = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 2 Varint
                        case 16:
                            instance.ClassId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 3 Varint
                        case 24:
                            instance.OriginX = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 4 Varint
                        case 32:
                            instance.OriginY = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 5 Varint
                        case 40:
                            instance.OriginZ = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 6 Varint
                        case 48:
                            instance.AngleY = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 7 Varint
                        case 56:
                            instance.Defuser = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        // Field 8 Varint
                        case 64:
                            instance.PlayerHasDefuser = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        // Field 9 Varint
                        case 72:
                            instance.PlayerHasC4 = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Serialize the instance into the stream</summary>
            public static void Serialize(Stream stream, SpottedEntityUpdate instance)
            {
                var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
                // Key for field: 1, Varint
                stream.WriteByte(8);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.EntityIdx);
                // Key for field: 2, Varint
                stream.WriteByte(16);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.ClassId);
                // Key for field: 3, Varint
                stream.WriteByte(24);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.OriginX);
                // Key for field: 4, Varint
                stream.WriteByte(32);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.OriginY);
                // Key for field: 5, Varint
                stream.WriteByte(40);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.OriginZ);
                // Key for field: 6, Varint
                stream.WriteByte(48);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.AngleY);
                // Key for field: 7, Varint
                stream.WriteByte(56);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.Defuser);
                // Key for field: 8, Varint
                stream.WriteByte(64);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.PlayerHasDefuser);
                // Key for field: 9, Varint
                stream.WriteByte(72);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.PlayerHasC4);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
            }

            /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
            public byte[] ToProtoBytes()
            {
                return SerializeToBytes( this );
            }

            /// <summary>Serialize to a Stream</summary>
            public void ToProto( Stream stream )
            {
                Serialize( stream, this );
            }

            /// <summary>Serialize to a JSON string</summary>
            public string ToJson()
            {
                var writer = new global::System.IO.StringWriter();
                SerializeJson(writer, this);
                return writer.ToString();
            }

            /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
            public static byte[] SerializeToBytes(SpottedEntityUpdate instance)
            {
                using (var ms = new MemoryStream())
                {
                    Serialize(ms, instance);
                    return ms.ToArray();
                }
            }
            /// <summary>Helper: Serialize with a varint length prefix</summary>
            public static void SerializeLengthDelimited(Stream stream, SpottedEntityUpdate instance)
            {
                var data = SerializeToBytes(instance);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
                stream.Write(data, 0, data.Length);
            }
            /// <summary>Serialize into a JSON string</summary>
            public static void SerializeJson(TextWriter writer, SpottedEntityUpdate instance)
            {
                writer.Write("{");
                writer.Write("\"entity_idx\":");
                writer.Write(instance.EntityIdx.ToString());
                writer.Write(",");
                writer.Write("\"class_id\":");
                writer.Write(instance.ClassId.ToString());
                writer.Write(",");
                writer.Write("\"origin_x\":");
                writer.Write(instance.OriginX.ToString());
                writer.Write(",");
                writer.Write("\"origin_y\":");
                writer.Write(instance.OriginY.ToString());
                writer.Write(",");
                writer.Write("\"origin_z\":");
                writer.Write(instance.OriginZ.ToString());
                writer.Write(",");
                writer.Write("\"angle_y\":");
                writer.Write(instance.AngleY.ToString());
                writer.Write(",");
                writer.Write("\"defuser\":");
                writer.Write(instance.Defuser ? "true" : "false");
                writer.Write(",");
                writer.Write("\"player_has_defuser\":");
                writer.Write(instance.PlayerHasDefuser ? "true" : "false");
                writer.Write(",");
                writer.Write("\"player_has_c4\":");
                writer.Write(instance.PlayerHasC4 ? "true" : "false");
                writer.Write("}");
            }
        }

    }

    [System.Serializable()]
    public partial class CCSUsrMsgReloadEffect
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgReloadEffect Deserialize(Stream stream)
        {
            CCSUsrMsgReloadEffect instance = new CCSUsrMsgReloadEffect();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgReloadEffect DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgReloadEffect instance = new CCSUsrMsgReloadEffect();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgReloadEffect DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgReloadEffect instance = new CCSUsrMsgReloadEffect();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgReloadEffect Deserialize(byte[] buffer)
        {
            CCSUsrMsgReloadEffect instance = new CCSUsrMsgReloadEffect();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgReloadEffect Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgReloadEffect instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgReloadEffect Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgReloadEffect instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Entidx = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Actanim = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgReloadEffect DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgReloadEffect instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Entidx = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Actanim = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgReloadEffect DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgReloadEffect instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Entidx = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Actanim = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgReloadEffect instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Entidx);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Actanim);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgReloadEffect instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgReloadEffect instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgReloadEffect instance)
        {
            writer.Write("{");
            writer.Write("\"entidx\":");
            writer.Write(instance.Entidx.ToString());
            writer.Write(",");
            writer.Write("\"actanim\":");
            writer.Write(instance.Actanim.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgAdjustMoney
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgAdjustMoney Deserialize(Stream stream)
        {
            CCSUsrMsgAdjustMoney instance = new CCSUsrMsgAdjustMoney();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgAdjustMoney DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgAdjustMoney instance = new CCSUsrMsgAdjustMoney();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgAdjustMoney DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgAdjustMoney instance = new CCSUsrMsgAdjustMoney();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgAdjustMoney Deserialize(byte[] buffer)
        {
            CCSUsrMsgAdjustMoney instance = new CCSUsrMsgAdjustMoney();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgAdjustMoney Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgAdjustMoney instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgAdjustMoney Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgAdjustMoney instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Amount = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgAdjustMoney DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgAdjustMoney instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Amount = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgAdjustMoney DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgAdjustMoney instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Amount = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgAdjustMoney instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Amount);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgAdjustMoney instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgAdjustMoney instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgAdjustMoney instance)
        {
            writer.Write("{");
            writer.Write("\"amount\":");
            writer.Write(instance.Amount.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgKillCam
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgKillCam Deserialize(Stream stream)
        {
            CCSUsrMsgKillCam instance = new CCSUsrMsgKillCam();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgKillCam DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgKillCam instance = new CCSUsrMsgKillCam();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgKillCam DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgKillCam instance = new CCSUsrMsgKillCam();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgKillCam Deserialize(byte[] buffer)
        {
            CCSUsrMsgKillCam instance = new CCSUsrMsgKillCam();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgKillCam Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgKillCam instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgKillCam Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgKillCam instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.ObsMode = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.FirstTarget = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.SecondTarget = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgKillCam DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgKillCam instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.ObsMode = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.FirstTarget = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.SecondTarget = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgKillCam DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgKillCam instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.ObsMode = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.FirstTarget = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.SecondTarget = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgKillCam instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.ObsMode);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.FirstTarget);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.SecondTarget);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgKillCam instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgKillCam instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgKillCam instance)
        {
            writer.Write("{");
            writer.Write("\"obs_mode\":");
            writer.Write(instance.ObsMode.ToString());
            writer.Write(",");
            writer.Write("\"first_target\":");
            writer.Write(instance.FirstTarget.ToString());
            writer.Write(",");
            writer.Write("\"second_target\":");
            writer.Write(instance.SecondTarget.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgDesiredTimescale
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgDesiredTimescale Deserialize(Stream stream)
        {
            CCSUsrMsgDesiredTimescale instance = new CCSUsrMsgDesiredTimescale();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgDesiredTimescale DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgDesiredTimescale instance = new CCSUsrMsgDesiredTimescale();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgDesiredTimescale DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgDesiredTimescale instance = new CCSUsrMsgDesiredTimescale();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgDesiredTimescale Deserialize(byte[] buffer)
        {
            CCSUsrMsgDesiredTimescale instance = new CCSUsrMsgDesiredTimescale();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgDesiredTimescale Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgDesiredTimescale instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgDesiredTimescale Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgDesiredTimescale instance)
        {
            BinaryReader br = new BinaryReader(stream);
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.DesiredTimescale = br.ReadSingle();
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.DurationRealtimeSec = br.ReadSingle();
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.InterpolatorType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Fixed32
                    case 37:
                        instance.StartBlendTime = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgDesiredTimescale DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgDesiredTimescale instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.DesiredTimescale = br.ReadSingle();
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.DurationRealtimeSec = br.ReadSingle();
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.InterpolatorType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Fixed32
                    case 37:
                        instance.StartBlendTime = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgDesiredTimescale DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgDesiredTimescale instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.DesiredTimescale = br.ReadSingle();
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.DurationRealtimeSec = br.ReadSingle();
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.InterpolatorType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Fixed32
                    case 37:
                        instance.StartBlendTime = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgDesiredTimescale instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Fixed32
            stream.WriteByte(13);
            bw.Write(instance.DesiredTimescale);
            // Key for field: 2, Fixed32
            stream.WriteByte(21);
            bw.Write(instance.DurationRealtimeSec);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.InterpolatorType);
            // Key for field: 4, Fixed32
            stream.WriteByte(37);
            bw.Write(instance.StartBlendTime);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgDesiredTimescale instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgDesiredTimescale instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgDesiredTimescale instance)
        {
            writer.Write("{");
            writer.Write("\"desired_timescale\":");
            writer.Write(instance.DesiredTimescale.ToString());
            writer.Write(",");
            writer.Write("\"duration_realtime_sec\":");
            writer.Write(instance.DurationRealtimeSec.ToString());
            writer.Write(",");
            writer.Write("\"interpolator_type\":");
            writer.Write(instance.InterpolatorType.ToString());
            writer.Write(",");
            writer.Write("\"start_blend_time\":");
            writer.Write(instance.StartBlendTime.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgCurrentTimescale
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgCurrentTimescale Deserialize(Stream stream)
        {
            CCSUsrMsgCurrentTimescale instance = new CCSUsrMsgCurrentTimescale();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgCurrentTimescale DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgCurrentTimescale instance = new CCSUsrMsgCurrentTimescale();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgCurrentTimescale DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgCurrentTimescale instance = new CCSUsrMsgCurrentTimescale();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgCurrentTimescale Deserialize(byte[] buffer)
        {
            CCSUsrMsgCurrentTimescale instance = new CCSUsrMsgCurrentTimescale();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgCurrentTimescale Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgCurrentTimescale instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgCurrentTimescale Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgCurrentTimescale instance)
        {
            BinaryReader br = new BinaryReader(stream);
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.CurTimescale = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgCurrentTimescale DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgCurrentTimescale instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.CurTimescale = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgCurrentTimescale DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgCurrentTimescale instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.CurTimescale = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgCurrentTimescale instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Fixed32
            stream.WriteByte(13);
            bw.Write(instance.CurTimescale);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgCurrentTimescale instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgCurrentTimescale instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgCurrentTimescale instance)
        {
            writer.Write("{");
            writer.Write("\"cur_timescale\":");
            writer.Write(instance.CurTimescale.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgAchievementEvent
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgAchievementEvent Deserialize(Stream stream)
        {
            CCSUsrMsgAchievementEvent instance = new CCSUsrMsgAchievementEvent();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgAchievementEvent DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgAchievementEvent instance = new CCSUsrMsgAchievementEvent();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgAchievementEvent DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgAchievementEvent instance = new CCSUsrMsgAchievementEvent();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgAchievementEvent Deserialize(byte[] buffer)
        {
            CCSUsrMsgAchievementEvent instance = new CCSUsrMsgAchievementEvent();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgAchievementEvent Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgAchievementEvent instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgAchievementEvent Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgAchievementEvent instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Achievement = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Count = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.UserId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgAchievementEvent DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgAchievementEvent instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Achievement = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Count = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.UserId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgAchievementEvent DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgAchievementEvent instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Achievement = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Count = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.UserId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgAchievementEvent instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Achievement);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Count);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.UserId);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgAchievementEvent instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgAchievementEvent instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgAchievementEvent instance)
        {
            writer.Write("{");
            writer.Write("\"achievement\":");
            writer.Write(instance.Achievement.ToString());
            writer.Write(",");
            writer.Write("\"count\":");
            writer.Write(instance.Count.ToString());
            writer.Write(",");
            writer.Write("\"user_id\":");
            writer.Write(instance.UserId.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgMatchEndConditions
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgMatchEndConditions Deserialize(Stream stream)
        {
            CCSUsrMsgMatchEndConditions instance = new CCSUsrMsgMatchEndConditions();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgMatchEndConditions DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgMatchEndConditions instance = new CCSUsrMsgMatchEndConditions();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgMatchEndConditions DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgMatchEndConditions instance = new CCSUsrMsgMatchEndConditions();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgMatchEndConditions Deserialize(byte[] buffer)
        {
            CCSUsrMsgMatchEndConditions instance = new CCSUsrMsgMatchEndConditions();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgMatchEndConditions Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgMatchEndConditions instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgMatchEndConditions Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgMatchEndConditions instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Fraglimit = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.MpMaxrounds = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.MpWinlimit = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.MpTimelimit = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgMatchEndConditions DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgMatchEndConditions instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Fraglimit = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.MpMaxrounds = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.MpWinlimit = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.MpTimelimit = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgMatchEndConditions DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgMatchEndConditions instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Fraglimit = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.MpMaxrounds = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.MpWinlimit = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.MpTimelimit = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgMatchEndConditions instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Fraglimit);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.MpMaxrounds);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.MpWinlimit);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.MpTimelimit);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgMatchEndConditions instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgMatchEndConditions instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgMatchEndConditions instance)
        {
            writer.Write("{");
            writer.Write("\"fraglimit\":");
            writer.Write(instance.Fraglimit.ToString());
            writer.Write(",");
            writer.Write("\"mp_maxrounds\":");
            writer.Write(instance.MpMaxrounds.ToString());
            writer.Write(",");
            writer.Write("\"mp_winlimit\":");
            writer.Write(instance.MpWinlimit.ToString());
            writer.Write(",");
            writer.Write("\"mp_timelimit\":");
            writer.Write(instance.MpTimelimit.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgDisplayInventory
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgDisplayInventory Deserialize(Stream stream)
        {
            CCSUsrMsgDisplayInventory instance = new CCSUsrMsgDisplayInventory();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgDisplayInventory DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgDisplayInventory instance = new CCSUsrMsgDisplayInventory();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgDisplayInventory DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgDisplayInventory instance = new CCSUsrMsgDisplayInventory();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgDisplayInventory Deserialize(byte[] buffer)
        {
            CCSUsrMsgDisplayInventory instance = new CCSUsrMsgDisplayInventory();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgDisplayInventory Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgDisplayInventory instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgDisplayInventory Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgDisplayInventory instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Display = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.UserId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgDisplayInventory DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgDisplayInventory instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Display = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.UserId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgDisplayInventory DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgDisplayInventory instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Display = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.UserId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgDisplayInventory instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.Display);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.UserId);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgDisplayInventory instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgDisplayInventory instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgDisplayInventory instance)
        {
            writer.Write("{");
            writer.Write("\"display\":");
            writer.Write(instance.Display ? "true" : "false");
            writer.Write(",");
            writer.Write("\"user_id\":");
            writer.Write(instance.UserId.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgCallVoteFailed
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgCallVoteFailed Deserialize(Stream stream)
        {
            CCSUsrMsgCallVoteFailed instance = new CCSUsrMsgCallVoteFailed();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgCallVoteFailed DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgCallVoteFailed instance = new CCSUsrMsgCallVoteFailed();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgCallVoteFailed DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgCallVoteFailed instance = new CCSUsrMsgCallVoteFailed();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgCallVoteFailed Deserialize(byte[] buffer)
        {
            CCSUsrMsgCallVoteFailed instance = new CCSUsrMsgCallVoteFailed();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgCallVoteFailed Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgCallVoteFailed instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgCallVoteFailed Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgCallVoteFailed instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Reason = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Time = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgCallVoteFailed DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgCallVoteFailed instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Reason = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Time = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgCallVoteFailed DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgCallVoteFailed instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Reason = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Time = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgCallVoteFailed instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Reason);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Time);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgCallVoteFailed instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgCallVoteFailed instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgCallVoteFailed instance)
        {
            writer.Write("{");
            writer.Write("\"reason\":");
            writer.Write(instance.Reason.ToString());
            writer.Write(",");
            writer.Write("\"time\":");
            writer.Write(instance.Time.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgVoteStart
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgVoteStart Deserialize(Stream stream)
        {
            CCSUsrMsgVoteStart instance = new CCSUsrMsgVoteStart();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgVoteStart DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgVoteStart instance = new CCSUsrMsgVoteStart();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgVoteStart DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgVoteStart instance = new CCSUsrMsgVoteStart();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgVoteStart Deserialize(byte[] buffer)
        {
            CCSUsrMsgVoteStart instance = new CCSUsrMsgVoteStart();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoteStart Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoteStart instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoteStart Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoteStart instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Team = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.EntIdx = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.VoteType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.DispStr = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        instance.DetailsStr = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 6 LengthDelimited
                    case 50:
                        instance.OtherTeamStr = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 7 Varint
                    case 56:
                        instance.IsYesNoVote = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoteStart DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoteStart instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Team = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.EntIdx = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.VoteType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.DispStr = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        instance.DetailsStr = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 6 LengthDelimited
                    case 50:
                        instance.OtherTeamStr = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 7 Varint
                    case 56:
                        instance.IsYesNoVote = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoteStart DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoteStart instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Team = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.EntIdx = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.VoteType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.DispStr = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        instance.DetailsStr = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 6 LengthDelimited
                    case 50:
                        instance.OtherTeamStr = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 7 Varint
                    case 56:
                        instance.IsYesNoVote = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgVoteStart instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Team);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.EntIdx);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.VoteType);
            if (instance.DispStr != null)
            {
                // Key for field: 4, LengthDelimited
                stream.WriteByte(34);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.DispStr));
            }
            if (instance.DetailsStr != null)
            {
                // Key for field: 5, LengthDelimited
                stream.WriteByte(42);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.DetailsStr));
            }
            if (instance.OtherTeamStr != null)
            {
                // Key for field: 6, LengthDelimited
                stream.WriteByte(50);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.OtherTeamStr));
            }
            // Key for field: 7, Varint
            stream.WriteByte(56);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.IsYesNoVote);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgVoteStart instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgVoteStart instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgVoteStart instance)
        {
            writer.Write("{");
            writer.Write("\"team\":");
            writer.Write(instance.Team.ToString());
            writer.Write(",");
            writer.Write("\"ent_idx\":");
            writer.Write(instance.EntIdx.ToString());
            writer.Write(",");
            writer.Write("\"vote_type\":");
            writer.Write(instance.VoteType.ToString());
            writer.Write(",");
            writer.Write("\"disp_str\":");
            if (instance.DispStr != null)
            {
                writer.Write("\"" + instance.DispStr + "\"");
            }
            writer.Write(",");
            writer.Write("\"details_str\":");
            if (instance.DetailsStr != null)
            {
                writer.Write("\"" + instance.DetailsStr + "\"");
            }
            writer.Write(",");
            writer.Write("\"other_team_str\":");
            if (instance.OtherTeamStr != null)
            {
                writer.Write("\"" + instance.OtherTeamStr + "\"");
            }
            writer.Write(",");
            writer.Write("\"is_yes_no_vote\":");
            writer.Write(instance.IsYesNoVote ? "true" : "false");
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgVotePass
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgVotePass Deserialize(Stream stream)
        {
            CCSUsrMsgVotePass instance = new CCSUsrMsgVotePass();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgVotePass DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgVotePass instance = new CCSUsrMsgVotePass();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgVotePass DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgVotePass instance = new CCSUsrMsgVotePass();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgVotePass Deserialize(byte[] buffer)
        {
            CCSUsrMsgVotePass instance = new CCSUsrMsgVotePass();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVotePass Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVotePass instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVotePass Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVotePass instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Team = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.VoteType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.DispStr = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.DetailsStr = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVotePass DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVotePass instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Team = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.VoteType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.DispStr = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.DetailsStr = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVotePass DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVotePass instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Team = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.VoteType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.DispStr = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.DetailsStr = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgVotePass instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Team);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.VoteType);
            if (instance.DispStr != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.DispStr));
            }
            if (instance.DetailsStr != null)
            {
                // Key for field: 4, LengthDelimited
                stream.WriteByte(34);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.DetailsStr));
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgVotePass instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgVotePass instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgVotePass instance)
        {
            writer.Write("{");
            writer.Write("\"team\":");
            writer.Write(instance.Team.ToString());
            writer.Write(",");
            writer.Write("\"vote_type\":");
            writer.Write(instance.VoteType.ToString());
            writer.Write(",");
            writer.Write("\"disp_str\":");
            if (instance.DispStr != null)
            {
                writer.Write("\"" + instance.DispStr + "\"");
            }
            writer.Write(",");
            writer.Write("\"details_str\":");
            if (instance.DetailsStr != null)
            {
                writer.Write("\"" + instance.DetailsStr + "\"");
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgVoteFailed
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgVoteFailed Deserialize(Stream stream)
        {
            CCSUsrMsgVoteFailed instance = new CCSUsrMsgVoteFailed();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgVoteFailed DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgVoteFailed instance = new CCSUsrMsgVoteFailed();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgVoteFailed DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgVoteFailed instance = new CCSUsrMsgVoteFailed();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgVoteFailed Deserialize(byte[] buffer)
        {
            CCSUsrMsgVoteFailed instance = new CCSUsrMsgVoteFailed();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoteFailed Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoteFailed instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoteFailed Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoteFailed instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Team = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Reason = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoteFailed DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoteFailed instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Team = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Reason = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoteFailed DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoteFailed instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Team = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Reason = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgVoteFailed instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Team);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Reason);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgVoteFailed instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgVoteFailed instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgVoteFailed instance)
        {
            writer.Write("{");
            writer.Write("\"team\":");
            writer.Write(instance.Team.ToString());
            writer.Write(",");
            writer.Write("\"reason\":");
            writer.Write(instance.Reason.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgVoteSetup
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgVoteSetup Deserialize(Stream stream)
        {
            CCSUsrMsgVoteSetup instance = new CCSUsrMsgVoteSetup();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgVoteSetup DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgVoteSetup instance = new CCSUsrMsgVoteSetup();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgVoteSetup DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgVoteSetup instance = new CCSUsrMsgVoteSetup();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgVoteSetup Deserialize(byte[] buffer)
        {
            CCSUsrMsgVoteSetup instance = new CCSUsrMsgVoteSetup();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoteSetup Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoteSetup instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoteSetup Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoteSetup instance)
        {
            if (instance.PotentialIssues == null)
                instance.PotentialIssues = new List<string>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.PotentialIssues.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoteSetup DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoteSetup instance)
        {
            if (instance.PotentialIssues == null)
                instance.PotentialIssues = new List<string>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.PotentialIssues.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoteSetup DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgVoteSetup instance)
        {
            if (instance.PotentialIssues == null)
                instance.PotentialIssues = new List<string>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.PotentialIssues.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgVoteSetup instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.PotentialIssues != null)
            {
                foreach (var i1 in instance.PotentialIssues)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(i1));
                }
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgVoteSetup instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgVoteSetup instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgVoteSetup instance)
        {
            writer.Write("{");
            writer.Write("\"potential_issues\":");

            if (instance.PotentialIssues != null)
            {
                writer.Write("[");
                var first = true;
                foreach (var i1 in instance.PotentialIssues)
                {
                    if (!first) writer.Write(",");
                    else first = false;
                    writer.Write("\"" + i1 + "\"");
                }
                writer.Write("]");
            }
            else
            {
                writer.Write("null");
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgSendLastKillerDamageToClient
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgSendLastKillerDamageToClient Deserialize(Stream stream)
        {
            CCSUsrMsgSendLastKillerDamageToClient instance = new CCSUsrMsgSendLastKillerDamageToClient();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgSendLastKillerDamageToClient DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgSendLastKillerDamageToClient instance = new CCSUsrMsgSendLastKillerDamageToClient();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgSendLastKillerDamageToClient DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgSendLastKillerDamageToClient instance = new CCSUsrMsgSendLastKillerDamageToClient();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgSendLastKillerDamageToClient Deserialize(byte[] buffer)
        {
            CCSUsrMsgSendLastKillerDamageToClient instance = new CCSUsrMsgSendLastKillerDamageToClient();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgSendLastKillerDamageToClient Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgSendLastKillerDamageToClient instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgSendLastKillerDamageToClient Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgSendLastKillerDamageToClient instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.NumHitsGiven = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.DamageGiven = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.NumHitsTaken = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.DamageTaken = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgSendLastKillerDamageToClient DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgSendLastKillerDamageToClient instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.NumHitsGiven = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.DamageGiven = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.NumHitsTaken = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.DamageTaken = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgSendLastKillerDamageToClient DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgSendLastKillerDamageToClient instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.NumHitsGiven = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.DamageGiven = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.NumHitsTaken = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.DamageTaken = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgSendLastKillerDamageToClient instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.NumHitsGiven);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.DamageGiven);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.NumHitsTaken);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.DamageTaken);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgSendLastKillerDamageToClient instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgSendLastKillerDamageToClient instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgSendLastKillerDamageToClient instance)
        {
            writer.Write("{");
            writer.Write("\"num_hits_given\":");
            writer.Write(instance.NumHitsGiven.ToString());
            writer.Write(",");
            writer.Write("\"damage_given\":");
            writer.Write(instance.DamageGiven.ToString());
            writer.Write(",");
            writer.Write("\"num_hits_taken\":");
            writer.Write(instance.NumHitsTaken.ToString());
            writer.Write(",");
            writer.Write("\"damage_taken\":");
            writer.Write(instance.DamageTaken.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgItemPickup
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgItemPickup Deserialize(Stream stream)
        {
            CCSUsrMsgItemPickup instance = new CCSUsrMsgItemPickup();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgItemPickup DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgItemPickup instance = new CCSUsrMsgItemPickup();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgItemPickup DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgItemPickup instance = new CCSUsrMsgItemPickup();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgItemPickup Deserialize(byte[] buffer)
        {
            CCSUsrMsgItemPickup instance = new CCSUsrMsgItemPickup();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgItemPickup Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgItemPickup instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgItemPickup Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgItemPickup instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Item = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgItemPickup DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgItemPickup instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Item = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgItemPickup DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgItemPickup instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Item = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgItemPickup instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.Item != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Item));
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgItemPickup instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgItemPickup instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgItemPickup instance)
        {
            writer.Write("{");
            writer.Write("\"item\":");
            if (instance.Item != null)
            {
                writer.Write("\"" + instance.Item + "\"");
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgShowMenu
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgShowMenu Deserialize(Stream stream)
        {
            CCSUsrMsgShowMenu instance = new CCSUsrMsgShowMenu();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgShowMenu DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgShowMenu instance = new CCSUsrMsgShowMenu();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgShowMenu DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgShowMenu instance = new CCSUsrMsgShowMenu();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgShowMenu Deserialize(byte[] buffer)
        {
            CCSUsrMsgShowMenu instance = new CCSUsrMsgShowMenu();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgShowMenu Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgShowMenu instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgShowMenu Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgShowMenu instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.BitsValidSlots = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.DisplayTime = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.MenuString = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgShowMenu DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgShowMenu instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.BitsValidSlots = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.DisplayTime = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.MenuString = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgShowMenu DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgShowMenu instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.BitsValidSlots = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.DisplayTime = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.MenuString = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgShowMenu instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.BitsValidSlots);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.DisplayTime);
            if (instance.MenuString != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.MenuString));
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgShowMenu instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgShowMenu instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgShowMenu instance)
        {
            writer.Write("{");
            writer.Write("\"bits_valid_slots\":");
            writer.Write(instance.BitsValidSlots.ToString());
            writer.Write(",");
            writer.Write("\"display_time\":");
            writer.Write(instance.DisplayTime.ToString());
            writer.Write(",");
            writer.Write("\"menu_string\":");
            if (instance.MenuString != null)
            {
                writer.Write("\"" + instance.MenuString + "\"");
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgBarTime
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgBarTime Deserialize(Stream stream)
        {
            CCSUsrMsgBarTime instance = new CCSUsrMsgBarTime();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgBarTime DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgBarTime instance = new CCSUsrMsgBarTime();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgBarTime DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgBarTime instance = new CCSUsrMsgBarTime();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgBarTime Deserialize(byte[] buffer)
        {
            CCSUsrMsgBarTime instance = new CCSUsrMsgBarTime();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgBarTime Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgBarTime instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgBarTime Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgBarTime instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Time = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgBarTime DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgBarTime instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Time = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgBarTime DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgBarTime instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Time = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgBarTime instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.Time != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Time));
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgBarTime instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgBarTime instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgBarTime instance)
        {
            writer.Write("{");
            writer.Write("\"time\":");
            if (instance.Time != null)
            {
                writer.Write("\"" + instance.Time + "\"");
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgAmmoDenied
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgAmmoDenied Deserialize(Stream stream)
        {
            CCSUsrMsgAmmoDenied instance = new CCSUsrMsgAmmoDenied();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgAmmoDenied DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgAmmoDenied instance = new CCSUsrMsgAmmoDenied();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgAmmoDenied DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgAmmoDenied instance = new CCSUsrMsgAmmoDenied();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgAmmoDenied Deserialize(byte[] buffer)
        {
            CCSUsrMsgAmmoDenied instance = new CCSUsrMsgAmmoDenied();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgAmmoDenied Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgAmmoDenied instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgAmmoDenied Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgAmmoDenied instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.AmmoIdx = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgAmmoDenied DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgAmmoDenied instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.AmmoIdx = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgAmmoDenied DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgAmmoDenied instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.AmmoIdx = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgAmmoDenied instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.AmmoIdx);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgAmmoDenied instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgAmmoDenied instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgAmmoDenied instance)
        {
            writer.Write("{");
            writer.Write("\"ammoIdx\":");
            writer.Write(instance.AmmoIdx.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgMarkAchievement
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgMarkAchievement Deserialize(Stream stream)
        {
            CCSUsrMsgMarkAchievement instance = new CCSUsrMsgMarkAchievement();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgMarkAchievement DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgMarkAchievement instance = new CCSUsrMsgMarkAchievement();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgMarkAchievement DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgMarkAchievement instance = new CCSUsrMsgMarkAchievement();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgMarkAchievement Deserialize(byte[] buffer)
        {
            CCSUsrMsgMarkAchievement instance = new CCSUsrMsgMarkAchievement();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgMarkAchievement Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgMarkAchievement instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgMarkAchievement Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgMarkAchievement instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Achievement = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgMarkAchievement DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgMarkAchievement instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Achievement = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgMarkAchievement DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgMarkAchievement instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Achievement = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgMarkAchievement instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.Achievement != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Achievement));
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgMarkAchievement instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgMarkAchievement instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgMarkAchievement instance)
        {
            writer.Write("{");
            writer.Write("\"achievement\":");
            if (instance.Achievement != null)
            {
                writer.Write("\"" + instance.Achievement + "\"");
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgItemDrop
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgItemDrop Deserialize(Stream stream)
        {
            CCSUsrMsgItemDrop instance = new CCSUsrMsgItemDrop();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgItemDrop DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgItemDrop instance = new CCSUsrMsgItemDrop();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgItemDrop DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgItemDrop instance = new CCSUsrMsgItemDrop();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgItemDrop Deserialize(byte[] buffer)
        {
            CCSUsrMsgItemDrop instance = new CCSUsrMsgItemDrop();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgItemDrop Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgItemDrop instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgItemDrop Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgItemDrop instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Itemid = (long)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Death = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgItemDrop DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgItemDrop instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Itemid = (long)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Death = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgItemDrop DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgItemDrop instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Itemid = (long)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Death = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgItemDrop instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Itemid);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.Death);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgItemDrop instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgItemDrop instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgItemDrop instance)
        {
            writer.Write("{");
            writer.Write("\"itemid\":");
            writer.Write(instance.Itemid.ToString());
            writer.Write(",");
            writer.Write("\"death\":");
            writer.Write(instance.Death ? "true" : "false");
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgGlowPropTurnOff
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgGlowPropTurnOff Deserialize(Stream stream)
        {
            CCSUsrMsgGlowPropTurnOff instance = new CCSUsrMsgGlowPropTurnOff();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgGlowPropTurnOff DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgGlowPropTurnOff instance = new CCSUsrMsgGlowPropTurnOff();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgGlowPropTurnOff DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgGlowPropTurnOff instance = new CCSUsrMsgGlowPropTurnOff();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgGlowPropTurnOff Deserialize(byte[] buffer)
        {
            CCSUsrMsgGlowPropTurnOff instance = new CCSUsrMsgGlowPropTurnOff();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgGlowPropTurnOff Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgGlowPropTurnOff instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgGlowPropTurnOff Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgGlowPropTurnOff instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Entidx = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgGlowPropTurnOff DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgGlowPropTurnOff instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Entidx = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgGlowPropTurnOff DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgGlowPropTurnOff instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Entidx = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgGlowPropTurnOff instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Entidx);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgGlowPropTurnOff instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgGlowPropTurnOff instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgGlowPropTurnOff instance)
        {
            writer.Write("{");
            writer.Write("\"entidx\":");
            writer.Write(instance.Entidx.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgRoundBackupFilenames
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgRoundBackupFilenames Deserialize(Stream stream)
        {
            CCSUsrMsgRoundBackupFilenames instance = new CCSUsrMsgRoundBackupFilenames();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgRoundBackupFilenames DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgRoundBackupFilenames instance = new CCSUsrMsgRoundBackupFilenames();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgRoundBackupFilenames DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgRoundBackupFilenames instance = new CCSUsrMsgRoundBackupFilenames();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgRoundBackupFilenames Deserialize(byte[] buffer)
        {
            CCSUsrMsgRoundBackupFilenames instance = new CCSUsrMsgRoundBackupFilenames();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgRoundBackupFilenames Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgRoundBackupFilenames instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgRoundBackupFilenames Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgRoundBackupFilenames instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Count = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Index = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.Filename = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.Nicename = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgRoundBackupFilenames DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgRoundBackupFilenames instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Count = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Index = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.Filename = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.Nicename = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgRoundBackupFilenames DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgRoundBackupFilenames instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Count = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Index = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.Filename = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.Nicename = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgRoundBackupFilenames instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Count);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Index);
            if (instance.Filename != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Filename));
            }
            if (instance.Nicename != null)
            {
                // Key for field: 4, LengthDelimited
                stream.WriteByte(34);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Nicename));
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgRoundBackupFilenames instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgRoundBackupFilenames instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgRoundBackupFilenames instance)
        {
            writer.Write("{");
            writer.Write("\"count\":");
            writer.Write(instance.Count.ToString());
            writer.Write(",");
            writer.Write("\"index\":");
            writer.Write(instance.Index.ToString());
            writer.Write(",");
            writer.Write("\"filename\":");
            if (instance.Filename != null)
            {
                writer.Write("\"" + instance.Filename + "\"");
            }
            writer.Write(",");
            writer.Write("\"nicename\":");
            if (instance.Nicename != null)
            {
                writer.Write("\"" + instance.Nicename + "\"");
            }
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgResetHud
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgResetHud Deserialize(Stream stream)
        {
            CCSUsrMsgResetHud instance = new CCSUsrMsgResetHud();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgResetHud DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgResetHud instance = new CCSUsrMsgResetHud();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgResetHud DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgResetHud instance = new CCSUsrMsgResetHud();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgResetHud Deserialize(byte[] buffer)
        {
            CCSUsrMsgResetHud instance = new CCSUsrMsgResetHud();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgResetHud Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgResetHud instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgResetHud Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgResetHud instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Reset = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgResetHud DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgResetHud instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Reset = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgResetHud DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgResetHud instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Reset = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgResetHud instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.Reset);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgResetHud instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgResetHud instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgResetHud instance)
        {
            writer.Write("{");
            writer.Write("\"reset\":");
            writer.Write(instance.Reset ? "true" : "false");
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgGameTitle
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgGameTitle Deserialize(Stream stream)
        {
            CCSUsrMsgGameTitle instance = new CCSUsrMsgGameTitle();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgGameTitle DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgGameTitle instance = new CCSUsrMsgGameTitle();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgGameTitle DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgGameTitle instance = new CCSUsrMsgGameTitle();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgGameTitle Deserialize(byte[] buffer)
        {
            CCSUsrMsgGameTitle instance = new CCSUsrMsgGameTitle();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgGameTitle Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgGameTitle instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgGameTitle Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgGameTitle instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Dummy = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgGameTitle DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgGameTitle instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Dummy = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgGameTitle DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgGameTitle instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Dummy = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgGameTitle instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Dummy);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgGameTitle instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgGameTitle instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgGameTitle instance)
        {
            writer.Write("{");
            writer.Write("\"dummy\":");
            writer.Write(instance.Dummy.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgRequestState
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgRequestState Deserialize(Stream stream)
        {
            CCSUsrMsgRequestState instance = new CCSUsrMsgRequestState();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgRequestState DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgRequestState instance = new CCSUsrMsgRequestState();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgRequestState DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgRequestState instance = new CCSUsrMsgRequestState();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgRequestState Deserialize(byte[] buffer)
        {
            CCSUsrMsgRequestState instance = new CCSUsrMsgRequestState();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgRequestState Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgRequestState instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgRequestState Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgRequestState instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Dummy = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgRequestState DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgRequestState instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Dummy = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgRequestState DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgRequestState instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Dummy = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgRequestState instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Dummy);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgRequestState instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgRequestState instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgRequestState instance)
        {
            writer.Write("{");
            writer.Write("\"dummy\":");
            writer.Write(instance.Dummy.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgStopSpectatorMode
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgStopSpectatorMode Deserialize(Stream stream)
        {
            CCSUsrMsgStopSpectatorMode instance = new CCSUsrMsgStopSpectatorMode();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgStopSpectatorMode DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgStopSpectatorMode instance = new CCSUsrMsgStopSpectatorMode();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgStopSpectatorMode DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgStopSpectatorMode instance = new CCSUsrMsgStopSpectatorMode();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgStopSpectatorMode Deserialize(byte[] buffer)
        {
            CCSUsrMsgStopSpectatorMode instance = new CCSUsrMsgStopSpectatorMode();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgStopSpectatorMode Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgStopSpectatorMode instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgStopSpectatorMode Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgStopSpectatorMode instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Dummy = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgStopSpectatorMode DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgStopSpectatorMode instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Dummy = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgStopSpectatorMode DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgStopSpectatorMode instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Dummy = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgStopSpectatorMode instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Dummy);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgStopSpectatorMode instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgStopSpectatorMode instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgStopSpectatorMode instance)
        {
            writer.Write("{");
            writer.Write("\"dummy\":");
            writer.Write(instance.Dummy.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgDisconnectToLobby
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgDisconnectToLobby Deserialize(Stream stream)
        {
            CCSUsrMsgDisconnectToLobby instance = new CCSUsrMsgDisconnectToLobby();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgDisconnectToLobby DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgDisconnectToLobby instance = new CCSUsrMsgDisconnectToLobby();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgDisconnectToLobby DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgDisconnectToLobby instance = new CCSUsrMsgDisconnectToLobby();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgDisconnectToLobby Deserialize(byte[] buffer)
        {
            CCSUsrMsgDisconnectToLobby instance = new CCSUsrMsgDisconnectToLobby();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgDisconnectToLobby Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgDisconnectToLobby instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgDisconnectToLobby Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgDisconnectToLobby instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Dummy = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgDisconnectToLobby DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgDisconnectToLobby instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Dummy = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgDisconnectToLobby DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgDisconnectToLobby instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Dummy = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgDisconnectToLobby instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Dummy);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgDisconnectToLobby instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgDisconnectToLobby instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgDisconnectToLobby instance)
        {
            writer.Write("{");
            writer.Write("\"dummy\":");
            writer.Write(instance.Dummy.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgWarmupHasEnded
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgWarmupHasEnded Deserialize(Stream stream)
        {
            CCSUsrMsgWarmupHasEnded instance = new CCSUsrMsgWarmupHasEnded();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgWarmupHasEnded DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgWarmupHasEnded instance = new CCSUsrMsgWarmupHasEnded();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgWarmupHasEnded DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgWarmupHasEnded instance = new CCSUsrMsgWarmupHasEnded();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgWarmupHasEnded Deserialize(byte[] buffer)
        {
            CCSUsrMsgWarmupHasEnded instance = new CCSUsrMsgWarmupHasEnded();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgWarmupHasEnded Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgWarmupHasEnded instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgWarmupHasEnded Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgWarmupHasEnded instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Dummy = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgWarmupHasEnded DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgWarmupHasEnded instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Dummy = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgWarmupHasEnded DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgWarmupHasEnded instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Dummy = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgWarmupHasEnded instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Dummy);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgWarmupHasEnded instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgWarmupHasEnded instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgWarmupHasEnded instance)
        {
            writer.Write("{");
            writer.Write("\"dummy\":");
            writer.Write(instance.Dummy.ToString());
            writer.Write("}");
        }
    }

    [System.Serializable()]
    public partial class CCSUsrMsgClientInfo
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgClientInfo Deserialize(Stream stream)
        {
            CCSUsrMsgClientInfo instance = new CCSUsrMsgClientInfo();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgClientInfo DeserializeLengthDelimited(Stream stream)
        {
            CCSUsrMsgClientInfo instance = new CCSUsrMsgClientInfo();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CCSUsrMsgClientInfo DeserializeLength(Stream stream, int length)
        {
            CCSUsrMsgClientInfo instance = new CCSUsrMsgClientInfo();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CCSUsrMsgClientInfo Deserialize(byte[] buffer)
        {
            CCSUsrMsgClientInfo instance = new CCSUsrMsgClientInfo();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Load this value from a proto buffer</summary>
        public void FromProto(Stream stream)
        {
            Deserialize(stream, this );
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgClientInfo Deserialize(byte[] buffer, VBspViewer.Importing.Dem.Generated.CCSUsrMsgClientInfo instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgClientInfo Deserialize(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgClientInfo instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Dummy = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgClientInfo DeserializeLengthDelimited(Stream stream, VBspViewer.Importing.Dem.Generated.CCSUsrMsgClientInfo instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Dummy = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static VBspViewer.Importing.Dem.Generated.CCSUsrMsgClientInfo DeserializeLength(Stream stream, int length, VBspViewer.Importing.Dem.Generated.CCSUsrMsgClientInfo instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Dummy = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CCSUsrMsgClientInfo instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Dummy);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Serialize and return data as a byte array (use this sparingly)</summary>
        public byte[] ToProtoBytes()
        {
            return SerializeToBytes( this );
        }

        /// <summary>Serialize to a Stream</summary>
        public void ToProto( Stream stream )
        {
            Serialize( stream, this );
        }

        /// <summary>Serialize to a JSON string</summary>
        public string ToJson()
        {
            var writer = new global::System.IO.StringWriter();
            SerializeJson(writer, this);
            return writer.ToString();
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CCSUsrMsgClientInfo instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CCSUsrMsgClientInfo instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
        /// <summary>Serialize into a JSON string</summary>
        public static void SerializeJson(TextWriter writer, CCSUsrMsgClientInfo instance)
        {
            writer.Write("{");
            writer.Write("\"dummy\":");
            writer.Write(instance.Dummy.ToString());
            writer.Write("}");
        }
    }

}
